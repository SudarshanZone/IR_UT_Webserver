// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: equsquoff/equSquareOff.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SqureoffClient is the client API for Squreoff service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SqureoffClient interface {
	Squareoff_Epb(ctx context.Context, in *Epb_SquareoffRequest, opts ...grpc.CallOption) (*Epb_SquareoffResponse, error)
	Squareoff_Otp(ctx context.Context, in *Opt_SquareoffRequest, opts ...grpc.CallOption) (*Otp_SquareoffResponse, error)
}

type squreoffClient struct {
	cc grpc.ClientConnInterface
}

func NewSqureoffClient(cc grpc.ClientConnInterface) SqureoffClient {
	return &squreoffClient{cc}
}

func (c *squreoffClient) Squareoff_Epb(ctx context.Context, in *Epb_SquareoffRequest, opts ...grpc.CallOption) (*Epb_SquareoffResponse, error) {
	out := new(Epb_SquareoffResponse)
	err := c.cc.Invoke(ctx, "/equsquoff.Squreoff/Squareoff_Epb", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *squreoffClient) Squareoff_Otp(ctx context.Context, in *Opt_SquareoffRequest, opts ...grpc.CallOption) (*Otp_SquareoffResponse, error) {
	out := new(Otp_SquareoffResponse)
	err := c.cc.Invoke(ctx, "/equsquoff.Squreoff/Squareoff_Otp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SqureoffServer is the server API for Squreoff service.
// All implementations must embed UnimplementedSqureoffServer
// for forward compatibility
type SqureoffServer interface {
	Squareoff_Epb(context.Context, *Epb_SquareoffRequest) (*Epb_SquareoffResponse, error)
	Squareoff_Otp(context.Context, *Opt_SquareoffRequest) (*Otp_SquareoffResponse, error)
	mustEmbedUnimplementedSqureoffServer()
}

// UnimplementedSqureoffServer must be embedded to have forward compatible implementations.
type UnimplementedSqureoffServer struct {
}

func (UnimplementedSqureoffServer) Squareoff_Epb(context.Context, *Epb_SquareoffRequest) (*Epb_SquareoffResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Squareoff_Epb not implemented")
}
func (UnimplementedSqureoffServer) Squareoff_Otp(context.Context, *Opt_SquareoffRequest) (*Otp_SquareoffResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Squareoff_Otp not implemented")
}
func (UnimplementedSqureoffServer) mustEmbedUnimplementedSqureoffServer() {}

// UnsafeSqureoffServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SqureoffServer will
// result in compilation errors.
type UnsafeSqureoffServer interface {
	mustEmbedUnimplementedSqureoffServer()
}

func RegisterSqureoffServer(s grpc.ServiceRegistrar, srv SqureoffServer) {
	s.RegisterService(&Squreoff_ServiceDesc, srv)
}

func _Squreoff_Squareoff_Epb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Epb_SquareoffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqureoffServer).Squareoff_Epb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/equsquoff.Squreoff/Squareoff_Epb",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqureoffServer).Squareoff_Epb(ctx, req.(*Epb_SquareoffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Squreoff_Squareoff_Otp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Opt_SquareoffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqureoffServer).Squareoff_Otp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/equsquoff.Squreoff/Squareoff_Otp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqureoffServer).Squareoff_Otp(ctx, req.(*Opt_SquareoffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Squreoff_ServiceDesc is the grpc.ServiceDesc for Squreoff service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Squreoff_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "equsquoff.Squreoff",
	HandlerType: (*SqureoffServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Squareoff_Epb",
			Handler:    _Squreoff_Squareoff_Epb_Handler,
		},
		{
			MethodName: "Squareoff_Otp",
			Handler:    _Squreoff_Squareoff_Otp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "equsquoff/equSquareOff.proto",
}
