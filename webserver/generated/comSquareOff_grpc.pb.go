// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: comsquoff/comSquareOff.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SquareoffClient is the client API for Squareoff service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SquareoffClient interface {
	Squareoff(ctx context.Context, in *SquareoffRequest, opts ...grpc.CallOption) (*SquareoffResponse, error)
}

type squareoffClient struct {
	cc grpc.ClientConnInterface
}

func NewSquareoffClient(cc grpc.ClientConnInterface) SquareoffClient {
	return &squareoffClient{cc}
}

func (c *squareoffClient) Squareoff(ctx context.Context, in *SquareoffRequest, opts ...grpc.CallOption) (*SquareoffResponse, error) {
	out := new(SquareoffResponse)
	err := c.cc.Invoke(ctx, "/comsquoff.Squareoff/Squareoff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SquareoffServer is the server API for Squareoff service.
// All implementations must embed UnimplementedSquareoffServer
// for forward compatibility
type SquareoffServer interface {
	Squareoff(context.Context, *SquareoffRequest) (*SquareoffResponse, error)
	mustEmbedUnimplementedSquareoffServer()
}

// UnimplementedSquareoffServer must be embedded to have forward compatible implementations.
type UnimplementedSquareoffServer struct {
}

func (UnimplementedSquareoffServer) Squareoff(context.Context, *SquareoffRequest) (*SquareoffResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Squareoff not implemented")
}
func (UnimplementedSquareoffServer) mustEmbedUnimplementedSquareoffServer() {}

// UnsafeSquareoffServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SquareoffServer will
// result in compilation errors.
type UnsafeSquareoffServer interface {
	mustEmbedUnimplementedSquareoffServer()
}

func RegisterSquareoffServer(s grpc.ServiceRegistrar, srv SquareoffServer) {
	s.RegisterService(&Squareoff_ServiceDesc, srv)
}

func _Squareoff_Squareoff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SquareoffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SquareoffServer).Squareoff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comsquoff.Squareoff/Squareoff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SquareoffServer).Squareoff(ctx, req.(*SquareoffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Squareoff_ServiceDesc is the grpc.ServiceDesc for Squareoff service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Squareoff_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "comsquoff.Squareoff",
	HandlerType: (*SquareoffServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Squareoff",
			Handler:    _Squareoff_Squareoff_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comsquoff/comSquareOff.proto",
}
