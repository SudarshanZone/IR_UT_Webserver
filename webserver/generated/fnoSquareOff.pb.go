// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.1
// source: fnosquoff/fnoSquareOff.proto

package __

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SquareOffRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FFO_USR_ID    int64      `protobuf:"varint,1,opt,name=FFO_USR_ID,json=FFOUSRID,proto3" json:"FFO_USR_ID,omitempty"`
	FFO_PRDCT_TYP string     `protobuf:"bytes,2,opt,name=FFO_PRDCT_TYP,json=FFOPRDCTTYP,proto3" json:"FFO_PRDCT_TYP,omitempty"`
	FcpDetails    []*FnoData `protobuf:"bytes,3,rep,name=FcpDetails,proto3" json:"FcpDetails,omitempty"`
}

func (x *SquareOffRequest) Reset() {
	*x = SquareOffRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fnosquoff_fnoSquareOff_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SquareOffRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SquareOffRequest) ProtoMessage() {}

func (x *SquareOffRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fnosquoff_fnoSquareOff_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SquareOffRequest.ProtoReflect.Descriptor instead.
func (*SquareOffRequest) Descriptor() ([]byte, []int) {
	return file_fnosquoff_fnoSquareOff_proto_rawDescGZIP(), []int{0}
}

func (x *SquareOffRequest) GetFFO_USR_ID() int64 {
	if x != nil {
		return x.FFO_USR_ID
	}
	return 0
}

func (x *SquareOffRequest) GetFFO_PRDCT_TYP() string {
	if x != nil {
		return x.FFO_PRDCT_TYP
	}
	return ""
}

func (x *SquareOffRequest) GetFcpDetails() []*FnoData {
	if x != nil {
		return x.FcpDetails
	}
	return nil
}

type FnoData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FCP_CLM_MTCH_ACCNT      string  `protobuf:"bytes,1,opt,name=FCP_CLM_MTCH_ACCNT,json=FCPCLMMTCHACCNT,proto3" json:"FCP_CLM_MTCH_ACCNT,omitempty"`
	FCP_XCHNG_CD            string  `protobuf:"bytes,2,opt,name=FCP_XCHNG_CD,json=FCPXCHNGCD,proto3" json:"FCP_XCHNG_CD,omitempty"`
	FCP_PRDCT_TYP           string  `protobuf:"bytes,3,opt,name=FCP_PRDCT_TYP,json=FCPPRDCTTYP,proto3" json:"FCP_PRDCT_TYP,omitempty"`
	FCP_INDSTK              string  `protobuf:"bytes,4,opt,name=FCP_INDSTK,json=FCPINDSTK,proto3" json:"FCP_INDSTK,omitempty"`
	FCP_UNDRLYNG            string  `protobuf:"bytes,5,opt,name=FCP_UNDRLYNG,json=FCPUNDRLYNG,proto3" json:"FCP_UNDRLYNG,omitempty"`
	FCP_EXPRY_DT            string  `protobuf:"bytes,6,opt,name=FCP_EXPRY_DT,json=FCPEXPRYDT,proto3" json:"FCP_EXPRY_DT,omitempty"`
	FCP_EXER_TYP            string  `protobuf:"bytes,7,opt,name=FCP_EXER_TYP,json=FCPEXERTYP,proto3" json:"FCP_EXER_TYP,omitempty"`
	FCP_STRK_PRC            int64   `protobuf:"varint,8,opt,name=FCP_STRK_PRC,json=FCPSTRKPRC,proto3" json:"FCP_STRK_PRC,omitempty"`
	FCP_OPT_TYP             string  `protobuf:"bytes,9,opt,name=FCP_OPT_TYP,json=FCPOPTTYP,proto3" json:"FCP_OPT_TYP,omitempty"`
	FCP_IBUY_QTY            int64   `protobuf:"varint,10,opt,name=FCP_IBUY_QTY,json=FCPIBUYQTY,proto3" json:"FCP_IBUY_QTY,omitempty"`
	FCP_IBUY_ORD_VAL        float64 `protobuf:"fixed64,11,opt,name=FCP_IBUY_ORD_VAL,json=FCPIBUYORDVAL,proto3" json:"FCP_IBUY_ORD_VAL,omitempty"`
	FCP_ISELL_QTY           int64   `protobuf:"varint,12,opt,name=FCP_ISELL_QTY,json=FCPISELLQTY,proto3" json:"FCP_ISELL_QTY,omitempty"`
	FCP_ISELL_ORD_VAL       float64 `protobuf:"fixed64,13,opt,name=FCP_ISELL_ORD_VAL,json=FCPISELLORDVAL,proto3" json:"FCP_ISELL_ORD_VAL,omitempty"`
	FCP_EXBUY_QTY           int64   `protobuf:"varint,14,opt,name=FCP_EXBUY_QTY,json=FCPEXBUYQTY,proto3" json:"FCP_EXBUY_QTY,omitempty"`
	FCP_EXBUY_ORD_VAL       float64 `protobuf:"fixed64,15,opt,name=FCP_EXBUY_ORD_VAL,json=FCPEXBUYORDVAL,proto3" json:"FCP_EXBUY_ORD_VAL,omitempty"`
	FCP_EXSELL_QTY          int64   `protobuf:"varint,16,opt,name=FCP_EXSELL_QTY,json=FCPEXSELLQTY,proto3" json:"FCP_EXSELL_QTY,omitempty"`
	FCP_EXSELL_ORD_VAL      float64 `protobuf:"fixed64,17,opt,name=FCP_EXSELL_ORD_VAL,json=FCPEXSELLORDVAL,proto3" json:"FCP_EXSELL_ORD_VAL,omitempty"`
	FCP_BUY_EXCTD_QTY       int64   `protobuf:"varint,18,opt,name=FCP_BUY_EXCTD_QTY,json=FCPBUYEXCTDQTY,proto3" json:"FCP_BUY_EXCTD_QTY,omitempty"`
	FCP_SELL_EXCTD_QTY      int64   `protobuf:"varint,19,opt,name=FCP_SELL_EXCTD_QTY,json=FCPSELLEXCTDQTY,proto3" json:"FCP_SELL_EXCTD_QTY,omitempty"`
	FCP_OPNPSTN_FLW         string  `protobuf:"bytes,20,opt,name=FCP_OPNPSTN_FLW,json=FCPOPNPSTNFLW,proto3" json:"FCP_OPNPSTN_FLW,omitempty"`
	FCP_OPNPSTN_QTY         int64   `protobuf:"varint,21,opt,name=FCP_OPNPSTN_QTY,json=FCPOPNPSTNQTY,proto3" json:"FCP_OPNPSTN_QTY,omitempty"`
	FCP_OPNPSTN_VAL         float64 `protobuf:"fixed64,22,opt,name=FCP_OPNPSTN_VAL,json=FCPOPNPSTNVAL,proto3" json:"FCP_OPNPSTN_VAL,omitempty"`
	FCP_EXRC_QTY            int64   `protobuf:"varint,23,opt,name=FCP_EXRC_QTY,json=FCPEXRCQTY,proto3" json:"FCP_EXRC_QTY,omitempty"`
	FCP_ASGND_QTY           int64   `protobuf:"varint,24,opt,name=FCP_ASGND_QTY,json=FCPASGNDQTY,proto3" json:"FCP_ASGND_QTY,omitempty"`
	FCP_OPT_PREMIUM         float64 `protobuf:"fixed64,25,opt,name=FCP_OPT_PREMIUM,json=FCPOPTPREMIUM,proto3" json:"FCP_OPT_PREMIUM,omitempty"`
	FCP_MTM_OPN_VAL         float64 `protobuf:"fixed64,26,opt,name=FCP_MTM_OPN_VAL,json=FCPMTMOPNVAL,proto3" json:"FCP_MTM_OPN_VAL,omitempty"`
	FCP_IMTM_OPN_VAL        float64 `protobuf:"fixed64,27,opt,name=FCP_IMTM_OPN_VAL,json=FCPIMTMOPNVAL,proto3" json:"FCP_IMTM_OPN_VAL,omitempty"`
	FCP_UDLVRY_MRGN         float64 `protobuf:"fixed64,28,opt,name=FCP_UDLVRY_MRGN,json=FCPUDLVRYMRGN,proto3" json:"FCP_UDLVRY_MRGN,omitempty"`
	FCP_MTM_FLG             string  `protobuf:"bytes,29,opt,name=FCP_MTM_FLG,json=FCPMTMFLG,proto3" json:"FCP_MTM_FLG,omitempty"`
	FCP_TRG_PRC             float64 `protobuf:"fixed64,30,opt,name=FCP_TRG_PRC,json=FCPTRGPRC,proto3" json:"FCP_TRG_PRC,omitempty"`
	FCP_MIN_TRG_PRC         float64 `protobuf:"fixed64,31,opt,name=FCP_MIN_TRG_PRC,json=FCPMINTRGPRC,proto3" json:"FCP_MIN_TRG_PRC,omitempty"`
	FCP_DLVRY_MODE_FLAG     string  `protobuf:"bytes,32,opt,name=FCP_DLVRY_MODE_FLAG,json=FCPDLVRYMODEFLAG,proto3" json:"FCP_DLVRY_MODE_FLAG,omitempty"`
	FCP_DLVRY_OBLGAMT_BLCKD float64 `protobuf:"fixed64,33,opt,name=FCP_DLVRY_OBLGAMT_BLCKD,json=FCPDLVRYOBLGAMTBLCKD,proto3" json:"FCP_DLVRY_OBLGAMT_BLCKD,omitempty"`
	FCP_DLVRY_QTY_BLCKD     int64   `protobuf:"varint,34,opt,name=FCP_DLVRY_QTY_BLCKD,json=FCPDLVRYQTYBLCKD,proto3" json:"FCP_DLVRY_QTY_BLCKD,omitempty"`
	FCP_AVG_PRC             float64 `protobuf:"fixed64,35,opt,name=FCP_AVG_PRC,json=FCPAVGPRC,proto3" json:"FCP_AVG_PRC,omitempty"`
	FCP_UCC_CD              string  `protobuf:"bytes,36,opt,name=FCP_UCC_CD,json=FCPUCCCD,proto3" json:"FCP_UCC_CD,omitempty"`
}

func (x *FnoData) Reset() {
	*x = FnoData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fnosquoff_fnoSquareOff_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FnoData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FnoData) ProtoMessage() {}

func (x *FnoData) ProtoReflect() protoreflect.Message {
	mi := &file_fnosquoff_fnoSquareOff_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FnoData.ProtoReflect.Descriptor instead.
func (*FnoData) Descriptor() ([]byte, []int) {
	return file_fnosquoff_fnoSquareOff_proto_rawDescGZIP(), []int{1}
}

func (x *FnoData) GetFCP_CLM_MTCH_ACCNT() string {
	if x != nil {
		return x.FCP_CLM_MTCH_ACCNT
	}
	return ""
}

func (x *FnoData) GetFCP_XCHNG_CD() string {
	if x != nil {
		return x.FCP_XCHNG_CD
	}
	return ""
}

func (x *FnoData) GetFCP_PRDCT_TYP() string {
	if x != nil {
		return x.FCP_PRDCT_TYP
	}
	return ""
}

func (x *FnoData) GetFCP_INDSTK() string {
	if x != nil {
		return x.FCP_INDSTK
	}
	return ""
}

func (x *FnoData) GetFCP_UNDRLYNG() string {
	if x != nil {
		return x.FCP_UNDRLYNG
	}
	return ""
}

func (x *FnoData) GetFCP_EXPRY_DT() string {
	if x != nil {
		return x.FCP_EXPRY_DT
	}
	return ""
}

func (x *FnoData) GetFCP_EXER_TYP() string {
	if x != nil {
		return x.FCP_EXER_TYP
	}
	return ""
}

func (x *FnoData) GetFCP_STRK_PRC() int64 {
	if x != nil {
		return x.FCP_STRK_PRC
	}
	return 0
}

func (x *FnoData) GetFCP_OPT_TYP() string {
	if x != nil {
		return x.FCP_OPT_TYP
	}
	return ""
}

func (x *FnoData) GetFCP_IBUY_QTY() int64 {
	if x != nil {
		return x.FCP_IBUY_QTY
	}
	return 0
}

func (x *FnoData) GetFCP_IBUY_ORD_VAL() float64 {
	if x != nil {
		return x.FCP_IBUY_ORD_VAL
	}
	return 0
}

func (x *FnoData) GetFCP_ISELL_QTY() int64 {
	if x != nil {
		return x.FCP_ISELL_QTY
	}
	return 0
}

func (x *FnoData) GetFCP_ISELL_ORD_VAL() float64 {
	if x != nil {
		return x.FCP_ISELL_ORD_VAL
	}
	return 0
}

func (x *FnoData) GetFCP_EXBUY_QTY() int64 {
	if x != nil {
		return x.FCP_EXBUY_QTY
	}
	return 0
}

func (x *FnoData) GetFCP_EXBUY_ORD_VAL() float64 {
	if x != nil {
		return x.FCP_EXBUY_ORD_VAL
	}
	return 0
}

func (x *FnoData) GetFCP_EXSELL_QTY() int64 {
	if x != nil {
		return x.FCP_EXSELL_QTY
	}
	return 0
}

func (x *FnoData) GetFCP_EXSELL_ORD_VAL() float64 {
	if x != nil {
		return x.FCP_EXSELL_ORD_VAL
	}
	return 0
}

func (x *FnoData) GetFCP_BUY_EXCTD_QTY() int64 {
	if x != nil {
		return x.FCP_BUY_EXCTD_QTY
	}
	return 0
}

func (x *FnoData) GetFCP_SELL_EXCTD_QTY() int64 {
	if x != nil {
		return x.FCP_SELL_EXCTD_QTY
	}
	return 0
}

func (x *FnoData) GetFCP_OPNPSTN_FLW() string {
	if x != nil {
		return x.FCP_OPNPSTN_FLW
	}
	return ""
}

func (x *FnoData) GetFCP_OPNPSTN_QTY() int64 {
	if x != nil {
		return x.FCP_OPNPSTN_QTY
	}
	return 0
}

func (x *FnoData) GetFCP_OPNPSTN_VAL() float64 {
	if x != nil {
		return x.FCP_OPNPSTN_VAL
	}
	return 0
}

func (x *FnoData) GetFCP_EXRC_QTY() int64 {
	if x != nil {
		return x.FCP_EXRC_QTY
	}
	return 0
}

func (x *FnoData) GetFCP_ASGND_QTY() int64 {
	if x != nil {
		return x.FCP_ASGND_QTY
	}
	return 0
}

func (x *FnoData) GetFCP_OPT_PREMIUM() float64 {
	if x != nil {
		return x.FCP_OPT_PREMIUM
	}
	return 0
}

func (x *FnoData) GetFCP_MTM_OPN_VAL() float64 {
	if x != nil {
		return x.FCP_MTM_OPN_VAL
	}
	return 0
}

func (x *FnoData) GetFCP_IMTM_OPN_VAL() float64 {
	if x != nil {
		return x.FCP_IMTM_OPN_VAL
	}
	return 0
}

func (x *FnoData) GetFCP_UDLVRY_MRGN() float64 {
	if x != nil {
		return x.FCP_UDLVRY_MRGN
	}
	return 0
}

func (x *FnoData) GetFCP_MTM_FLG() string {
	if x != nil {
		return x.FCP_MTM_FLG
	}
	return ""
}

func (x *FnoData) GetFCP_TRG_PRC() float64 {
	if x != nil {
		return x.FCP_TRG_PRC
	}
	return 0
}

func (x *FnoData) GetFCP_MIN_TRG_PRC() float64 {
	if x != nil {
		return x.FCP_MIN_TRG_PRC
	}
	return 0
}

func (x *FnoData) GetFCP_DLVRY_MODE_FLAG() string {
	if x != nil {
		return x.FCP_DLVRY_MODE_FLAG
	}
	return ""
}

func (x *FnoData) GetFCP_DLVRY_OBLGAMT_BLCKD() float64 {
	if x != nil {
		return x.FCP_DLVRY_OBLGAMT_BLCKD
	}
	return 0
}

func (x *FnoData) GetFCP_DLVRY_QTY_BLCKD() int64 {
	if x != nil {
		return x.FCP_DLVRY_QTY_BLCKD
	}
	return 0
}

func (x *FnoData) GetFCP_AVG_PRC() float64 {
	if x != nil {
		return x.FCP_AVG_PRC
	}
	return 0
}

func (x *FnoData) GetFCP_UCC_CD() string {
	if x != nil {
		return x.FCP_UCC_CD
	}
	return ""
}

type SquareOffResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SquareOffResponse) Reset() {
	*x = SquareOffResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fnosquoff_fnoSquareOff_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SquareOffResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SquareOffResponse) ProtoMessage() {}

func (x *SquareOffResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fnosquoff_fnoSquareOff_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SquareOffResponse.ProtoReflect.Descriptor instead.
func (*SquareOffResponse) Descriptor() ([]byte, []int) {
	return file_fnosquoff_fnoSquareOff_proto_rawDescGZIP(), []int{2}
}

func (x *SquareOffResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SquareOffResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_fnosquoff_fnoSquareOff_proto protoreflect.FileDescriptor

var file_fnosquoff_fnoSquareOff_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x66, 0x6e, 0x6f, 0x73, 0x71, 0x75, 0x6f, 0x66, 0x66, 0x2f, 0x66, 0x6e, 0x6f, 0x53,
	0x71, 0x75, 0x61, 0x72, 0x65, 0x4f, 0x66, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09,
	0x66, 0x6e, 0x6f, 0x73, 0x71, 0x75, 0x6f, 0x66, 0x66, 0x22, 0x88, 0x01, 0x0a, 0x10, 0x53, 0x71,
	0x75, 0x61, 0x72, 0x65, 0x4f, 0x66, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x0a, 0x46, 0x46, 0x4f, 0x5f, 0x55, 0x53, 0x52, 0x5f, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x46, 0x46, 0x4f, 0x55, 0x53, 0x52, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0d,
	0x46, 0x46, 0x4f, 0x5f, 0x50, 0x52, 0x44, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x46, 0x46, 0x4f, 0x50, 0x52, 0x44, 0x43, 0x54, 0x54, 0x59, 0x50,
	0x12, 0x32, 0x0a, 0x0a, 0x46, 0x63, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x66, 0x6e, 0x6f, 0x73, 0x71, 0x75, 0x6f, 0x66, 0x66,
	0x2e, 0x46, 0x6e, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x46, 0x63, 0x70, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x22, 0xf0, 0x0a, 0x0a, 0x07, 0x46, 0x6e, 0x6f, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x2b, 0x0a, 0x12, 0x46, 0x43, 0x50, 0x5f, 0x43, 0x4c, 0x4d, 0x5f, 0x4d, 0x54, 0x43, 0x48,
	0x5f, 0x41, 0x43, 0x43, 0x4e, 0x54, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x46, 0x43,
	0x50, 0x43, 0x4c, 0x4d, 0x4d, 0x54, 0x43, 0x48, 0x41, 0x43, 0x43, 0x4e, 0x54, 0x12, 0x20, 0x0a,
	0x0c, 0x46, 0x43, 0x50, 0x5f, 0x58, 0x43, 0x48, 0x4e, 0x47, 0x5f, 0x43, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x46, 0x43, 0x50, 0x58, 0x43, 0x48, 0x4e, 0x47, 0x43, 0x44, 0x12,
	0x22, 0x0a, 0x0d, 0x46, 0x43, 0x50, 0x5f, 0x50, 0x52, 0x44, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x46, 0x43, 0x50, 0x50, 0x52, 0x44, 0x43, 0x54,
	0x54, 0x59, 0x50, 0x12, 0x1d, 0x0a, 0x0a, 0x46, 0x43, 0x50, 0x5f, 0x49, 0x4e, 0x44, 0x53, 0x54,
	0x4b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x46, 0x43, 0x50, 0x49, 0x4e, 0x44, 0x53,
	0x54, 0x4b, 0x12, 0x21, 0x0a, 0x0c, 0x46, 0x43, 0x50, 0x5f, 0x55, 0x4e, 0x44, 0x52, 0x4c, 0x59,
	0x4e, 0x47, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x46, 0x43, 0x50, 0x55, 0x4e, 0x44,
	0x52, 0x4c, 0x59, 0x4e, 0x47, 0x12, 0x20, 0x0a, 0x0c, 0x46, 0x43, 0x50, 0x5f, 0x45, 0x58, 0x50,
	0x52, 0x59, 0x5f, 0x44, 0x54, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x46, 0x43, 0x50,
	0x45, 0x58, 0x50, 0x52, 0x59, 0x44, 0x54, 0x12, 0x20, 0x0a, 0x0c, 0x46, 0x43, 0x50, 0x5f, 0x45,
	0x58, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x46,
	0x43, 0x50, 0x45, 0x58, 0x45, 0x52, 0x54, 0x59, 0x50, 0x12, 0x20, 0x0a, 0x0c, 0x46, 0x43, 0x50,
	0x5f, 0x53, 0x54, 0x52, 0x4b, 0x5f, 0x50, 0x52, 0x43, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x46, 0x43, 0x50, 0x53, 0x54, 0x52, 0x4b, 0x50, 0x52, 0x43, 0x12, 0x1e, 0x0a, 0x0b, 0x46,
	0x43, 0x50, 0x5f, 0x4f, 0x50, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x46, 0x43, 0x50, 0x4f, 0x50, 0x54, 0x54, 0x59, 0x50, 0x12, 0x20, 0x0a, 0x0c, 0x46,
	0x43, 0x50, 0x5f, 0x49, 0x42, 0x55, 0x59, 0x5f, 0x51, 0x54, 0x59, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x46, 0x43, 0x50, 0x49, 0x42, 0x55, 0x59, 0x51, 0x54, 0x59, 0x12, 0x27, 0x0a,
	0x10, 0x46, 0x43, 0x50, 0x5f, 0x49, 0x42, 0x55, 0x59, 0x5f, 0x4f, 0x52, 0x44, 0x5f, 0x56, 0x41,
	0x4c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x46, 0x43, 0x50, 0x49, 0x42, 0x55, 0x59,
	0x4f, 0x52, 0x44, 0x56, 0x41, 0x4c, 0x12, 0x22, 0x0a, 0x0d, 0x46, 0x43, 0x50, 0x5f, 0x49, 0x53,
	0x45, 0x4c, 0x4c, 0x5f, 0x51, 0x54, 0x59, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x46,
	0x43, 0x50, 0x49, 0x53, 0x45, 0x4c, 0x4c, 0x51, 0x54, 0x59, 0x12, 0x29, 0x0a, 0x11, 0x46, 0x43,
	0x50, 0x5f, 0x49, 0x53, 0x45, 0x4c, 0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x5f, 0x56, 0x41, 0x4c, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x46, 0x43, 0x50, 0x49, 0x53, 0x45, 0x4c, 0x4c, 0x4f,
	0x52, 0x44, 0x56, 0x41, 0x4c, 0x12, 0x22, 0x0a, 0x0d, 0x46, 0x43, 0x50, 0x5f, 0x45, 0x58, 0x42,
	0x55, 0x59, 0x5f, 0x51, 0x54, 0x59, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x46, 0x43,
	0x50, 0x45, 0x58, 0x42, 0x55, 0x59, 0x51, 0x54, 0x59, 0x12, 0x29, 0x0a, 0x11, 0x46, 0x43, 0x50,
	0x5f, 0x45, 0x58, 0x42, 0x55, 0x59, 0x5f, 0x4f, 0x52, 0x44, 0x5f, 0x56, 0x41, 0x4c, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x46, 0x43, 0x50, 0x45, 0x58, 0x42, 0x55, 0x59, 0x4f, 0x52,
	0x44, 0x56, 0x41, 0x4c, 0x12, 0x24, 0x0a, 0x0e, 0x46, 0x43, 0x50, 0x5f, 0x45, 0x58, 0x53, 0x45,
	0x4c, 0x4c, 0x5f, 0x51, 0x54, 0x59, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x46, 0x43,
	0x50, 0x45, 0x58, 0x53, 0x45, 0x4c, 0x4c, 0x51, 0x54, 0x59, 0x12, 0x2b, 0x0a, 0x12, 0x46, 0x43,
	0x50, 0x5f, 0x45, 0x58, 0x53, 0x45, 0x4c, 0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x5f, 0x56, 0x41, 0x4c,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x46, 0x43, 0x50, 0x45, 0x58, 0x53, 0x45, 0x4c,
	0x4c, 0x4f, 0x52, 0x44, 0x56, 0x41, 0x4c, 0x12, 0x29, 0x0a, 0x11, 0x46, 0x43, 0x50, 0x5f, 0x42,
	0x55, 0x59, 0x5f, 0x45, 0x58, 0x43, 0x54, 0x44, 0x5f, 0x51, 0x54, 0x59, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x46, 0x43, 0x50, 0x42, 0x55, 0x59, 0x45, 0x58, 0x43, 0x54, 0x44, 0x51,
	0x54, 0x59, 0x12, 0x2b, 0x0a, 0x12, 0x46, 0x43, 0x50, 0x5f, 0x53, 0x45, 0x4c, 0x4c, 0x5f, 0x45,
	0x58, 0x43, 0x54, 0x44, 0x5f, 0x51, 0x54, 0x59, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x46, 0x43, 0x50, 0x53, 0x45, 0x4c, 0x4c, 0x45, 0x58, 0x43, 0x54, 0x44, 0x51, 0x54, 0x59, 0x12,
	0x26, 0x0a, 0x0f, 0x46, 0x43, 0x50, 0x5f, 0x4f, 0x50, 0x4e, 0x50, 0x53, 0x54, 0x4e, 0x5f, 0x46,
	0x4c, 0x57, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x46, 0x43, 0x50, 0x4f, 0x50, 0x4e,
	0x50, 0x53, 0x54, 0x4e, 0x46, 0x4c, 0x57, 0x12, 0x26, 0x0a, 0x0f, 0x46, 0x43, 0x50, 0x5f, 0x4f,
	0x50, 0x4e, 0x50, 0x53, 0x54, 0x4e, 0x5f, 0x51, 0x54, 0x59, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x46, 0x43, 0x50, 0x4f, 0x50, 0x4e, 0x50, 0x53, 0x54, 0x4e, 0x51, 0x54, 0x59, 0x12,
	0x26, 0x0a, 0x0f, 0x46, 0x43, 0x50, 0x5f, 0x4f, 0x50, 0x4e, 0x50, 0x53, 0x54, 0x4e, 0x5f, 0x56,
	0x41, 0x4c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x46, 0x43, 0x50, 0x4f, 0x50, 0x4e,
	0x50, 0x53, 0x54, 0x4e, 0x56, 0x41, 0x4c, 0x12, 0x20, 0x0a, 0x0c, 0x46, 0x43, 0x50, 0x5f, 0x45,
	0x58, 0x52, 0x43, 0x5f, 0x51, 0x54, 0x59, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x46,
	0x43, 0x50, 0x45, 0x58, 0x52, 0x43, 0x51, 0x54, 0x59, 0x12, 0x22, 0x0a, 0x0d, 0x46, 0x43, 0x50,
	0x5f, 0x41, 0x53, 0x47, 0x4e, 0x44, 0x5f, 0x51, 0x54, 0x59, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x46, 0x43, 0x50, 0x41, 0x53, 0x47, 0x4e, 0x44, 0x51, 0x54, 0x59, 0x12, 0x26, 0x0a,
	0x0f, 0x46, 0x43, 0x50, 0x5f, 0x4f, 0x50, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x4d, 0x49, 0x55, 0x4d,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x46, 0x43, 0x50, 0x4f, 0x50, 0x54, 0x50, 0x52,
	0x45, 0x4d, 0x49, 0x55, 0x4d, 0x12, 0x25, 0x0a, 0x0f, 0x46, 0x43, 0x50, 0x5f, 0x4d, 0x54, 0x4d,
	0x5f, 0x4f, 0x50, 0x4e, 0x5f, 0x56, 0x41, 0x4c, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c,
	0x46, 0x43, 0x50, 0x4d, 0x54, 0x4d, 0x4f, 0x50, 0x4e, 0x56, 0x41, 0x4c, 0x12, 0x27, 0x0a, 0x10,
	0x46, 0x43, 0x50, 0x5f, 0x49, 0x4d, 0x54, 0x4d, 0x5f, 0x4f, 0x50, 0x4e, 0x5f, 0x56, 0x41, 0x4c,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x46, 0x43, 0x50, 0x49, 0x4d, 0x54, 0x4d, 0x4f,
	0x50, 0x4e, 0x56, 0x41, 0x4c, 0x12, 0x26, 0x0a, 0x0f, 0x46, 0x43, 0x50, 0x5f, 0x55, 0x44, 0x4c,
	0x56, 0x52, 0x59, 0x5f, 0x4d, 0x52, 0x47, 0x4e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d,
	0x46, 0x43, 0x50, 0x55, 0x44, 0x4c, 0x56, 0x52, 0x59, 0x4d, 0x52, 0x47, 0x4e, 0x12, 0x1e, 0x0a,
	0x0b, 0x46, 0x43, 0x50, 0x5f, 0x4d, 0x54, 0x4d, 0x5f, 0x46, 0x4c, 0x47, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x46, 0x43, 0x50, 0x4d, 0x54, 0x4d, 0x46, 0x4c, 0x47, 0x12, 0x1e, 0x0a,
	0x0b, 0x46, 0x43, 0x50, 0x5f, 0x54, 0x52, 0x47, 0x5f, 0x50, 0x52, 0x43, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x46, 0x43, 0x50, 0x54, 0x52, 0x47, 0x50, 0x52, 0x43, 0x12, 0x25, 0x0a,
	0x0f, 0x46, 0x43, 0x50, 0x5f, 0x4d, 0x49, 0x4e, 0x5f, 0x54, 0x52, 0x47, 0x5f, 0x50, 0x52, 0x43,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x46, 0x43, 0x50, 0x4d, 0x49, 0x4e, 0x54, 0x52,
	0x47, 0x50, 0x52, 0x43, 0x12, 0x2d, 0x0a, 0x13, 0x46, 0x43, 0x50, 0x5f, 0x44, 0x4c, 0x56, 0x52,
	0x59, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x46, 0x43, 0x50, 0x44, 0x4c, 0x56, 0x52, 0x59, 0x4d, 0x4f, 0x44, 0x45, 0x46,
	0x4c, 0x41, 0x47, 0x12, 0x35, 0x0a, 0x17, 0x46, 0x43, 0x50, 0x5f, 0x44, 0x4c, 0x56, 0x52, 0x59,
	0x5f, 0x4f, 0x42, 0x4c, 0x47, 0x41, 0x4d, 0x54, 0x5f, 0x42, 0x4c, 0x43, 0x4b, 0x44, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x46, 0x43, 0x50, 0x44, 0x4c, 0x56, 0x52, 0x59, 0x4f, 0x42,
	0x4c, 0x47, 0x41, 0x4d, 0x54, 0x42, 0x4c, 0x43, 0x4b, 0x44, 0x12, 0x2d, 0x0a, 0x13, 0x46, 0x43,
	0x50, 0x5f, 0x44, 0x4c, 0x56, 0x52, 0x59, 0x5f, 0x51, 0x54, 0x59, 0x5f, 0x42, 0x4c, 0x43, 0x4b,
	0x44, 0x18, 0x22, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x46, 0x43, 0x50, 0x44, 0x4c, 0x56, 0x52,
	0x59, 0x51, 0x54, 0x59, 0x42, 0x4c, 0x43, 0x4b, 0x44, 0x12, 0x1e, 0x0a, 0x0b, 0x46, 0x43, 0x50,
	0x5f, 0x41, 0x56, 0x47, 0x5f, 0x50, 0x52, 0x43, 0x18, 0x23, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x46, 0x43, 0x50, 0x41, 0x56, 0x47, 0x50, 0x52, 0x43, 0x12, 0x1c, 0x0a, 0x0a, 0x46, 0x43, 0x50,
	0x5f, 0x55, 0x43, 0x43, 0x5f, 0x43, 0x44, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46,
	0x43, 0x50, 0x55, 0x43, 0x43, 0x43, 0x44, 0x22, 0x45, 0x0a, 0x11, 0x53, 0x71, 0x75, 0x61, 0x72,
	0x65, 0x4f, 0x66, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x5f,
	0x0a, 0x10, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x4f, 0x66, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x4b, 0x0a, 0x0e, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x4f, 0x66, 0x66, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x66, 0x6e, 0x6f, 0x73, 0x71, 0x75, 0x6f, 0x66, 0x66,
	0x2e, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x4f, 0x66, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x66, 0x6e, 0x6f, 0x73, 0x71, 0x75, 0x6f, 0x66, 0x66, 0x2e, 0x53, 0x71,
	0x75, 0x61, 0x72, 0x65, 0x4f, 0x66, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x03, 0x5a, 0x01, 0x2e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fnosquoff_fnoSquareOff_proto_rawDescOnce sync.Once
	file_fnosquoff_fnoSquareOff_proto_rawDescData = file_fnosquoff_fnoSquareOff_proto_rawDesc
)

func file_fnosquoff_fnoSquareOff_proto_rawDescGZIP() []byte {
	file_fnosquoff_fnoSquareOff_proto_rawDescOnce.Do(func() {
		file_fnosquoff_fnoSquareOff_proto_rawDescData = protoimpl.X.CompressGZIP(file_fnosquoff_fnoSquareOff_proto_rawDescData)
	})
	return file_fnosquoff_fnoSquareOff_proto_rawDescData
}

var file_fnosquoff_fnoSquareOff_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_fnosquoff_fnoSquareOff_proto_goTypes = []any{
	(*SquareOffRequest)(nil),  // 0: fnosquoff.SquareOffRequest
	(*FnoData)(nil),           // 1: fnosquoff.FnoData
	(*SquareOffResponse)(nil), // 2: fnosquoff.SquareOffResponse
}
var file_fnosquoff_fnoSquareOff_proto_depIdxs = []int32{
	1, // 0: fnosquoff.SquareOffRequest.FcpDetails:type_name -> fnosquoff.FnoData
	0, // 1: fnosquoff.SquareOffService.SquareOffOrder:input_type -> fnosquoff.SquareOffRequest
	2, // 2: fnosquoff.SquareOffService.SquareOffOrder:output_type -> fnosquoff.SquareOffResponse
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_fnosquoff_fnoSquareOff_proto_init() }
func file_fnosquoff_fnoSquareOff_proto_init() {
	if File_fnosquoff_fnoSquareOff_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_fnosquoff_fnoSquareOff_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*SquareOffRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fnosquoff_fnoSquareOff_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*FnoData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fnosquoff_fnoSquareOff_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*SquareOffResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fnosquoff_fnoSquareOff_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_fnosquoff_fnoSquareOff_proto_goTypes,
		DependencyIndexes: file_fnosquoff_fnoSquareOff_proto_depIdxs,
		MessageInfos:      file_fnosquoff_fnoSquareOff_proto_msgTypes,
	}.Build()
	File_fnosquoff_fnoSquareOff_proto = out.File
	file_fnosquoff_fnoSquareOff_proto_rawDesc = nil
	file_fnosquoff_fnoSquareOff_proto_goTypes = nil
	file_fnosquoff_fnoSquareOff_proto_depIdxs = nil
}
