// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: comordr/comOrderDetails.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	C_OrderService_GetComOrder_FullMethodName = "/comordr.C_OrderService/GetComOrder"
)

// C_OrderServiceClient is the client API for C_OrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type C_OrderServiceClient interface {
	GetComOrder(ctx context.Context, in *ComOrderRequest, opts ...grpc.CallOption) (*ComOrderResponse, error)
}

type c_OrderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewC_OrderServiceClient(cc grpc.ClientConnInterface) C_OrderServiceClient {
	return &c_OrderServiceClient{cc}
}

func (c *c_OrderServiceClient) GetComOrder(ctx context.Context, in *ComOrderRequest, opts ...grpc.CallOption) (*ComOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ComOrderResponse)
	err := c.cc.Invoke(ctx, C_OrderService_GetComOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// C_OrderServiceServer is the server API for C_OrderService service.
// All implementations must embed UnimplementedC_OrderServiceServer
// for forward compatibility
type C_OrderServiceServer interface {
	GetComOrder(context.Context, *ComOrderRequest) (*ComOrderResponse, error)
	mustEmbedUnimplementedC_OrderServiceServer()
}

// UnimplementedC_OrderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedC_OrderServiceServer struct {
}

func (UnimplementedC_OrderServiceServer) GetComOrder(context.Context, *ComOrderRequest) (*ComOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComOrder not implemented")
}
func (UnimplementedC_OrderServiceServer) mustEmbedUnimplementedC_OrderServiceServer() {}

// UnsafeC_OrderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to C_OrderServiceServer will
// result in compilation errors.
type UnsafeC_OrderServiceServer interface {
	mustEmbedUnimplementedC_OrderServiceServer()
}

func RegisterC_OrderServiceServer(s grpc.ServiceRegistrar, srv C_OrderServiceServer) {
	s.RegisterService(&C_OrderService_ServiceDesc, srv)
}

func _C_OrderService_GetComOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(C_OrderServiceServer).GetComOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: C_OrderService_GetComOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(C_OrderServiceServer).GetComOrder(ctx, req.(*ComOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// C_OrderService_ServiceDesc is the grpc.ServiceDesc for C_OrderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var C_OrderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "comordr.C_OrderService",
	HandlerType: (*C_OrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetComOrder",
			Handler:    _C_OrderService_GetComOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comordr/comOrderDetails.proto",
}
