// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.1
// source: equsquoff/equSquareOff.proto

package __

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OtpEq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OtpClmMtchAcct       string  `protobuf:"bytes,1,opt,name=OtpClmMtchAcct,proto3" json:"OtpClmMtchAcct,omitempty"`
	OtpXchngCd           string  `protobuf:"bytes,2,opt,name=OtpXchngCd,proto3" json:"OtpXchngCd,omitempty"`
	OtpXchngSgmntCd      string  `protobuf:"bytes,3,opt,name=OtpXchngSgmntCd,proto3" json:"OtpXchngSgmntCd,omitempty"`
	OtpXchngSgmntSttlmnt int64   `protobuf:"varint,4,opt,name=OtpXchngSgmntSttlmnt,proto3" json:"OtpXchngSgmntSttlmnt,omitempty"`
	OtpStckCd            string  `protobuf:"bytes,5,opt,name=OtpStckCd,proto3" json:"OtpStckCd,omitempty"`
	OtpFlw               string  `protobuf:"bytes,6,opt,name=OtpFlw,proto3" json:"OtpFlw,omitempty"`
	OtpQty               int64   `protobuf:"varint,7,opt,name=OtpQty,proto3" json:"OtpQty,omitempty"`
	OtpCnvrtDlvryQty     int64   `protobuf:"varint,8,opt,name=OtpCnvrtDlvryQty,proto3" json:"OtpCnvrtDlvryQty,omitempty"`
	OtpCvrdQty           int64   `protobuf:"varint,9,opt,name=OtpCvrdQty,proto3" json:"OtpCvrdQty,omitempty"`
	OtpRt                float32 `protobuf:"fixed32,10,opt,name=OtpRt,proto3" json:"OtpRt,omitempty"`
	OtpMrgnAmt           float32 `protobuf:"fixed32,11,opt,name=OtpMrgnAmt,proto3" json:"OtpMrgnAmt,omitempty"`
	OtpTrdVal            float32 `protobuf:"fixed32,12,opt,name=OtpTrdVal,proto3" json:"OtpTrdVal,omitempty"`
	OtpRmrks             string  `protobuf:"bytes,13,opt,name=OtpRmrks,proto3" json:"OtpRmrks,omitempty"`
	OtpXferMrgnStts      string  `protobuf:"bytes,14,opt,name=OtpXferMrgnStts,proto3" json:"OtpXferMrgnStts,omitempty"`
	OtpSellOpnPrccsd     string  `protobuf:"bytes,15,opt,name=OtpSellOpnPrccsd,proto3" json:"OtpSellOpnPrccsd,omitempty"`
	OtpBuyOpnPrccsd      string  `protobuf:"bytes,16,opt,name=OtpBuyOpnPrccsd,proto3" json:"OtpBuyOpnPrccsd,omitempty"`
	OtpMrgnSqroffMode    string  `protobuf:"bytes,17,opt,name=OtpMrgnSqroffMode,proto3" json:"OtpMrgnSqroffMode,omitempty"`
	OtpEmTrdspltPrcsFlg  string  `protobuf:"bytes,18,opt,name=OtpEmTrdspltPrcsFlg,proto3" json:"OtpEmTrdspltPrcsFlg,omitempty"`
	OtpMtmFlg            string  `protobuf:"bytes,19,opt,name=OtpMtmFlg,proto3" json:"OtpMtmFlg,omitempty"`
	OtpMtmCansq          string  `protobuf:"bytes,20,opt,name=OtpMtmCansq,proto3" json:"OtpMtmCansq,omitempty"`
	OtpEosCan            string  `protobuf:"bytes,21,opt,name=OtpEosCan,proto3" json:"OtpEosCan,omitempty"`
	OtpTrgrPrc           float32 `protobuf:"fixed32,22,opt,name=OtpTrgrPrc,proto3" json:"OtpTrgrPrc,omitempty"`
	Otp_16TrgrPrc        float32 `protobuf:"fixed32,23,opt,name=Otp_16TrgrPrc,json=Otp16TrgrPrc,proto3" json:"Otp_16TrgrPrc,omitempty"`
	OtpMinMrgn           float32 `protobuf:"fixed32,24,opt,name=OtpMinMrgn,proto3" json:"OtpMinMrgn,omitempty"`
}

func (x *OtpEq) Reset() {
	*x = OtpEq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_equsquoff_equSquareOff_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtpEq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtpEq) ProtoMessage() {}

func (x *OtpEq) ProtoReflect() protoreflect.Message {
	mi := &file_equsquoff_equSquareOff_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtpEq.ProtoReflect.Descriptor instead.
func (*OtpEq) Descriptor() ([]byte, []int) {
	return file_equsquoff_equSquareOff_proto_rawDescGZIP(), []int{0}
}

func (x *OtpEq) GetOtpClmMtchAcct() string {
	if x != nil {
		return x.OtpClmMtchAcct
	}
	return ""
}

func (x *OtpEq) GetOtpXchngCd() string {
	if x != nil {
		return x.OtpXchngCd
	}
	return ""
}

func (x *OtpEq) GetOtpXchngSgmntCd() string {
	if x != nil {
		return x.OtpXchngSgmntCd
	}
	return ""
}

func (x *OtpEq) GetOtpXchngSgmntSttlmnt() int64 {
	if x != nil {
		return x.OtpXchngSgmntSttlmnt
	}
	return 0
}

func (x *OtpEq) GetOtpStckCd() string {
	if x != nil {
		return x.OtpStckCd
	}
	return ""
}

func (x *OtpEq) GetOtpFlw() string {
	if x != nil {
		return x.OtpFlw
	}
	return ""
}

func (x *OtpEq) GetOtpQty() int64 {
	if x != nil {
		return x.OtpQty
	}
	return 0
}

func (x *OtpEq) GetOtpCnvrtDlvryQty() int64 {
	if x != nil {
		return x.OtpCnvrtDlvryQty
	}
	return 0
}

func (x *OtpEq) GetOtpCvrdQty() int64 {
	if x != nil {
		return x.OtpCvrdQty
	}
	return 0
}

func (x *OtpEq) GetOtpRt() float32 {
	if x != nil {
		return x.OtpRt
	}
	return 0
}

func (x *OtpEq) GetOtpMrgnAmt() float32 {
	if x != nil {
		return x.OtpMrgnAmt
	}
	return 0
}

func (x *OtpEq) GetOtpTrdVal() float32 {
	if x != nil {
		return x.OtpTrdVal
	}
	return 0
}

func (x *OtpEq) GetOtpRmrks() string {
	if x != nil {
		return x.OtpRmrks
	}
	return ""
}

func (x *OtpEq) GetOtpXferMrgnStts() string {
	if x != nil {
		return x.OtpXferMrgnStts
	}
	return ""
}

func (x *OtpEq) GetOtpSellOpnPrccsd() string {
	if x != nil {
		return x.OtpSellOpnPrccsd
	}
	return ""
}

func (x *OtpEq) GetOtpBuyOpnPrccsd() string {
	if x != nil {
		return x.OtpBuyOpnPrccsd
	}
	return ""
}

func (x *OtpEq) GetOtpMrgnSqroffMode() string {
	if x != nil {
		return x.OtpMrgnSqroffMode
	}
	return ""
}

func (x *OtpEq) GetOtpEmTrdspltPrcsFlg() string {
	if x != nil {
		return x.OtpEmTrdspltPrcsFlg
	}
	return ""
}

func (x *OtpEq) GetOtpMtmFlg() string {
	if x != nil {
		return x.OtpMtmFlg
	}
	return ""
}

func (x *OtpEq) GetOtpMtmCansq() string {
	if x != nil {
		return x.OtpMtmCansq
	}
	return ""
}

func (x *OtpEq) GetOtpEosCan() string {
	if x != nil {
		return x.OtpEosCan
	}
	return ""
}

func (x *OtpEq) GetOtpTrgrPrc() float32 {
	if x != nil {
		return x.OtpTrgrPrc
	}
	return 0
}

func (x *OtpEq) GetOtp_16TrgrPrc() float32 {
	if x != nil {
		return x.Otp_16TrgrPrc
	}
	return 0
}

func (x *OtpEq) GetOtpMinMrgn() float32 {
	if x != nil {
		return x.OtpMinMrgn
	}
	return 0
}

type EpbEq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EpbClmMtchAccnt      string  `protobuf:"bytes,1,opt,name=EpbClmMtchAccnt,proto3" json:"EpbClmMtchAccnt,omitempty"`            // character(10) NOT NULL
	EpbXchngCd           string  `protobuf:"bytes,2,opt,name=EpbXchngCd,proto3" json:"EpbXchngCd,omitempty"`                      // character(3) NOT NULL
	EpbXchngSgmntCd      string  `protobuf:"bytes,3,opt,name=EpbXchngSgmntCd,proto3" json:"EpbXchngSgmntCd,omitempty"`            // character(2) NOT NULL
	EpbXchngSgmntSttlmnt int64   `protobuf:"varint,4,opt,name=EpbXchngSgmntSttlmnt,proto3" json:"EpbXchngSgmntSttlmnt,omitempty"` // integer NOT NULL
	EpbStckCd            string  `protobuf:"bytes,5,opt,name=EpbStckCd,proto3" json:"EpbStckCd,omitempty"`                        // character(6) NOT NULL
	EpbOrgnlPstnQty      int64   `protobuf:"varint,6,opt,name=EpbOrgnlPstnQty,proto3" json:"EpbOrgnlPstnQty,omitempty"`           // integer NOT NULL
	EpbRate              float32 `protobuf:"fixed32,7,opt,name=EpbRate,proto3" json:"EpbRate,omitempty"`                          // double precision NOT NULL
	EpbOrgnlAmtPayble    float32 `protobuf:"fixed32,8,opt,name=EpbOrgnlAmtPayble,proto3" json:"EpbOrgnlAmtPayble,omitempty"`      // numeric(18,2) NOT NULL
	EpbOrgnlMrgnAmt      float32 `protobuf:"fixed32,9,opt,name=EpbOrgnlMrgnAmt,proto3" json:"EpbOrgnlMrgnAmt,omitempty"`          // numeric(18,2) NOT NULL
	EpbSellQty           int64   `protobuf:"varint,10,opt,name=EpbSellQty,proto3" json:"EpbSellQty,omitempty"`                    // integer NOT NULL
	EpbCvrOrdQty         int64   `protobuf:"varint,11,opt,name=EpbCvrOrdQty,proto3" json:"EpbCvrOrdQty,omitempty"`                // integer NOT NULL
	EpbNetMrgnAmt        float32 `protobuf:"fixed32,12,opt,name=EpbNetMrgnAmt,proto3" json:"EpbNetMrgnAmt,omitempty"`             // numeric(18,2) NOT NULL
	EpbNetAmtPayble      float32 `protobuf:"fixed32,14,opt,name=EpbNetAmtPayble,proto3" json:"EpbNetAmtPayble,omitempty"`         // numeric(18,2) NOT NULL
	EpbNetPstnQty        int64   `protobuf:"varint,15,opt,name=EpbNetPstnQty,proto3" json:"EpbNetPstnQty,omitempty"`              // integer NOT NULL
	EpbCtdQty            int64   `protobuf:"varint,16,opt,name=EpbCtdQty,proto3" json:"EpbCtdQty,omitempty"`                      // integer NOT NULL
	EpbPstnStts          string  `protobuf:"bytes,17,opt,name=EpbPstnStts,proto3" json:"EpbPstnStts,omitempty"`                   // character(1) NOT NULL
	EpbLpcCalcStts       string  `protobuf:"bytes,18,opt,name=EpbLpcCalcStts,proto3" json:"EpbLpcCalcStts,omitempty"`             // character(1) NOT NULL
	EpbSqroffMode        string  `protobuf:"bytes,19,opt,name=EpbSqroffMode,proto3" json:"EpbSqroffMode,omitempty"`               // character(1) NOT NULL
	EpbPstnTrdDt         string  `protobuf:"bytes,20,opt,name=EpbPstnTrdDt,proto3" json:"EpbPstnTrdDt,omitempty"`                 // timestamp(0) without time zone NOT NULL
	EpbMtmPrcsFlg        string  `protobuf:"bytes,21,opt,name=EpbMtmPrcsFlg,proto3" json:"EpbMtmPrcsFlg,omitempty"`               // character(1) NOT NULL
	EpbLastMdfcnDt       string  `protobuf:"bytes,22,opt,name=EpbLastMdfcnDt,proto3" json:"EpbLastMdfcnDt,omitempty"`             // timestamp(0) without time zone NOT NULL
	EpbInsDate           string  `protobuf:"bytes,23,opt,name=EpbInsDate,proto3" json:"EpbInsDate,omitempty"`                     // timestamp(0) without time zone NOT NULL
	EpbCloseDate         string  `protobuf:"bytes,24,opt,name=EpbCloseDate,proto3" json:"EpbCloseDate,omitempty"`                 // timestamp(0) without time zone
	EpbSysFailFlg        string  `protobuf:"bytes,25,opt,name=EpbSysFailFlg,proto3" json:"EpbSysFailFlg,omitempty"`               // character(1) NOT NULL
	EpbLastPymntDt       string  `protobuf:"bytes,26,opt,name=EpbLastPymntDt,proto3" json:"EpbLastPymntDt,omitempty"`             // timestamp(0) without time zone
	EpbLpcCalcEndDt      string  `protobuf:"bytes,27,opt,name=EpbLpcCalcEndDt,proto3" json:"EpbLpcCalcEndDt,omitempty"`           // timestamp(0) without time zone
	EpbMtmCansq          string  `protobuf:"bytes,28,opt,name=EpbMtmCansq,proto3" json:"EpbMtmCansq,omitempty"`                   // character(1)
	EpbExpiryDt          string  `protobuf:"bytes,29,opt,name=EpbExpiryDt,proto3" json:"EpbExpiryDt,omitempty"`                   // timestamp(0) without time zone
	EpbMinMrgn           float32 `protobuf:"fixed32,30,opt,name=EpbMinMrgn,proto3" json:"EpbMinMrgn,omitempty"`                   // double precision
	EpbMrgnDbcrPrcsFlg   string  `protobuf:"bytes,31,opt,name=EpbMrgnDbcrPrcsFlg,proto3" json:"EpbMrgnDbcrPrcsFlg,omitempty"`     // character(1)
	EpbDpId              string  `protobuf:"bytes,32,opt,name=EpbDpId,proto3" json:"EpbDpId,omitempty"`                           // character(8)
	EpbDpClntId          string  `protobuf:"bytes,33,opt,name=EpbDpClntId,proto3" json:"EpbDpClntId,omitempty"`                   // character(8)
	EpbPledgeStts        string  `protobuf:"bytes,34,opt,name=EpbPledgeStts,proto3" json:"EpbPledgeStts,omitempty"`               // character(1)
	EpbBtstNetMrgnAmt    float32 `protobuf:"fixed32,35,opt,name=EpbBtstNetMrgnAmt,proto3" json:"EpbBtstNetMrgnAmt,omitempty"`     // numeric(18,2)
	EpbBtstMrgnBlckd     float32 `protobuf:"fixed32,36,opt,name=EpbBtstMrgnBlckd,proto3" json:"EpbBtstMrgnBlckd,omitempty"`       // numeric(18,2)
	EpbBtstMrgnDbcrFlg   string  `protobuf:"bytes,37,opt,name=EpbBtstMrgnDbcrFlg,proto3" json:"EpbBtstMrgnDbcrFlg,omitempty"`     // character(1)
	EpbBtstSgmntCd       string  `protobuf:"bytes,38,opt,name=EpbBtstSgmntCd,proto3" json:"EpbBtstSgmntCd,omitempty"`             // character(2)
	EpbBtstStlmnt        int64   `protobuf:"varint,39,opt,name=EpbBtstStlmnt,proto3" json:"EpbBtstStlmnt,omitempty"`              // integer
	EpbBtstCshBlckd      float32 `protobuf:"fixed32,40,opt,name=EpbBtstCshBlckd,proto3" json:"EpbBtstCshBlckd,omitempty"`         // numeric(18,2)
	EpbBtstSamBlckd      float32 `protobuf:"fixed32,41,opt,name=EpbBtstSamBlckd,proto3" json:"EpbBtstSamBlckd,omitempty"`         // numeric(18,2)
	EpbBtstCalcDt        string  `protobuf:"bytes,42,opt,name=EpbBtstCalcDt,proto3" json:"EpbBtstCalcDt,omitempty"`               // timestamp(0) without time zone
	EpbDbcrCalcDt        string  `protobuf:"bytes,43,opt,name=EpbDbcrCalcDt,proto3" json:"EpbDbcrCalcDt,omitempty"`               // timestamp(0) without time zone
	EpbNsdlRefNo         string  `protobuf:"bytes,44,opt,name=EpbNsdlRefNo,proto3" json:"EpbNsdlRefNo,omitempty"`                 // character varying(16)
	EpbMrgnWithheldFlg   string  `protobuf:"bytes,45,opt,name=epb_mrgn_withheld_flg,json=epbMrgnWithheldFlg,proto3" json:"epb_mrgn_withheld_flg,omitempty"`
}

func (x *EpbEq) Reset() {
	*x = EpbEq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_equsquoff_equSquareOff_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpbEq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpbEq) ProtoMessage() {}

func (x *EpbEq) ProtoReflect() protoreflect.Message {
	mi := &file_equsquoff_equSquareOff_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpbEq.ProtoReflect.Descriptor instead.
func (*EpbEq) Descriptor() ([]byte, []int) {
	return file_equsquoff_equSquareOff_proto_rawDescGZIP(), []int{1}
}

func (x *EpbEq) GetEpbClmMtchAccnt() string {
	if x != nil {
		return x.EpbClmMtchAccnt
	}
	return ""
}

func (x *EpbEq) GetEpbXchngCd() string {
	if x != nil {
		return x.EpbXchngCd
	}
	return ""
}

func (x *EpbEq) GetEpbXchngSgmntCd() string {
	if x != nil {
		return x.EpbXchngSgmntCd
	}
	return ""
}

func (x *EpbEq) GetEpbXchngSgmntSttlmnt() int64 {
	if x != nil {
		return x.EpbXchngSgmntSttlmnt
	}
	return 0
}

func (x *EpbEq) GetEpbStckCd() string {
	if x != nil {
		return x.EpbStckCd
	}
	return ""
}

func (x *EpbEq) GetEpbOrgnlPstnQty() int64 {
	if x != nil {
		return x.EpbOrgnlPstnQty
	}
	return 0
}

func (x *EpbEq) GetEpbRate() float32 {
	if x != nil {
		return x.EpbRate
	}
	return 0
}

func (x *EpbEq) GetEpbOrgnlAmtPayble() float32 {
	if x != nil {
		return x.EpbOrgnlAmtPayble
	}
	return 0
}

func (x *EpbEq) GetEpbOrgnlMrgnAmt() float32 {
	if x != nil {
		return x.EpbOrgnlMrgnAmt
	}
	return 0
}

func (x *EpbEq) GetEpbSellQty() int64 {
	if x != nil {
		return x.EpbSellQty
	}
	return 0
}

func (x *EpbEq) GetEpbCvrOrdQty() int64 {
	if x != nil {
		return x.EpbCvrOrdQty
	}
	return 0
}

func (x *EpbEq) GetEpbNetMrgnAmt() float32 {
	if x != nil {
		return x.EpbNetMrgnAmt
	}
	return 0
}

func (x *EpbEq) GetEpbNetAmtPayble() float32 {
	if x != nil {
		return x.EpbNetAmtPayble
	}
	return 0
}

func (x *EpbEq) GetEpbNetPstnQty() int64 {
	if x != nil {
		return x.EpbNetPstnQty
	}
	return 0
}

func (x *EpbEq) GetEpbCtdQty() int64 {
	if x != nil {
		return x.EpbCtdQty
	}
	return 0
}

func (x *EpbEq) GetEpbPstnStts() string {
	if x != nil {
		return x.EpbPstnStts
	}
	return ""
}

func (x *EpbEq) GetEpbLpcCalcStts() string {
	if x != nil {
		return x.EpbLpcCalcStts
	}
	return ""
}

func (x *EpbEq) GetEpbSqroffMode() string {
	if x != nil {
		return x.EpbSqroffMode
	}
	return ""
}

func (x *EpbEq) GetEpbPstnTrdDt() string {
	if x != nil {
		return x.EpbPstnTrdDt
	}
	return ""
}

func (x *EpbEq) GetEpbMtmPrcsFlg() string {
	if x != nil {
		return x.EpbMtmPrcsFlg
	}
	return ""
}

func (x *EpbEq) GetEpbLastMdfcnDt() string {
	if x != nil {
		return x.EpbLastMdfcnDt
	}
	return ""
}

func (x *EpbEq) GetEpbInsDate() string {
	if x != nil {
		return x.EpbInsDate
	}
	return ""
}

func (x *EpbEq) GetEpbCloseDate() string {
	if x != nil {
		return x.EpbCloseDate
	}
	return ""
}

func (x *EpbEq) GetEpbSysFailFlg() string {
	if x != nil {
		return x.EpbSysFailFlg
	}
	return ""
}

func (x *EpbEq) GetEpbLastPymntDt() string {
	if x != nil {
		return x.EpbLastPymntDt
	}
	return ""
}

func (x *EpbEq) GetEpbLpcCalcEndDt() string {
	if x != nil {
		return x.EpbLpcCalcEndDt
	}
	return ""
}

func (x *EpbEq) GetEpbMtmCansq() string {
	if x != nil {
		return x.EpbMtmCansq
	}
	return ""
}

func (x *EpbEq) GetEpbExpiryDt() string {
	if x != nil {
		return x.EpbExpiryDt
	}
	return ""
}

func (x *EpbEq) GetEpbMinMrgn() float32 {
	if x != nil {
		return x.EpbMinMrgn
	}
	return 0
}

func (x *EpbEq) GetEpbMrgnDbcrPrcsFlg() string {
	if x != nil {
		return x.EpbMrgnDbcrPrcsFlg
	}
	return ""
}

func (x *EpbEq) GetEpbDpId() string {
	if x != nil {
		return x.EpbDpId
	}
	return ""
}

func (x *EpbEq) GetEpbDpClntId() string {
	if x != nil {
		return x.EpbDpClntId
	}
	return ""
}

func (x *EpbEq) GetEpbPledgeStts() string {
	if x != nil {
		return x.EpbPledgeStts
	}
	return ""
}

func (x *EpbEq) GetEpbBtstNetMrgnAmt() float32 {
	if x != nil {
		return x.EpbBtstNetMrgnAmt
	}
	return 0
}

func (x *EpbEq) GetEpbBtstMrgnBlckd() float32 {
	if x != nil {
		return x.EpbBtstMrgnBlckd
	}
	return 0
}

func (x *EpbEq) GetEpbBtstMrgnDbcrFlg() string {
	if x != nil {
		return x.EpbBtstMrgnDbcrFlg
	}
	return ""
}

func (x *EpbEq) GetEpbBtstSgmntCd() string {
	if x != nil {
		return x.EpbBtstSgmntCd
	}
	return ""
}

func (x *EpbEq) GetEpbBtstStlmnt() int64 {
	if x != nil {
		return x.EpbBtstStlmnt
	}
	return 0
}

func (x *EpbEq) GetEpbBtstCshBlckd() float32 {
	if x != nil {
		return x.EpbBtstCshBlckd
	}
	return 0
}

func (x *EpbEq) GetEpbBtstSamBlckd() float32 {
	if x != nil {
		return x.EpbBtstSamBlckd
	}
	return 0
}

func (x *EpbEq) GetEpbBtstCalcDt() string {
	if x != nil {
		return x.EpbBtstCalcDt
	}
	return ""
}

func (x *EpbEq) GetEpbDbcrCalcDt() string {
	if x != nil {
		return x.EpbDbcrCalcDt
	}
	return ""
}

func (x *EpbEq) GetEpbNsdlRefNo() string {
	if x != nil {
		return x.EpbNsdlRefNo
	}
	return ""
}

func (x *EpbEq) GetEpbMrgnWithheldFlg() string {
	if x != nil {
		return x.EpbMrgnWithheldFlg
	}
	return ""
}

type Epb_SquareoffRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epb  *EpbEq `protobuf:"bytes,1,opt,name=epb,proto3" json:"epb,omitempty"`
	Id   string `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
	Type string `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *Epb_SquareoffRequest) Reset() {
	*x = Epb_SquareoffRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_equsquoff_equSquareOff_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Epb_SquareoffRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Epb_SquareoffRequest) ProtoMessage() {}

func (x *Epb_SquareoffRequest) ProtoReflect() protoreflect.Message {
	mi := &file_equsquoff_equSquareOff_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Epb_SquareoffRequest.ProtoReflect.Descriptor instead.
func (*Epb_SquareoffRequest) Descriptor() ([]byte, []int) {
	return file_equsquoff_equSquareOff_proto_rawDescGZIP(), []int{2}
}

func (x *Epb_SquareoffRequest) GetEpb() *EpbEq {
	if x != nil {
		return x.Epb
	}
	return nil
}

func (x *Epb_SquareoffRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Epb_SquareoffRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type Epb_SquareoffResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *Epb_SquareoffResponse) Reset() {
	*x = Epb_SquareoffResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_equsquoff_equSquareOff_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Epb_SquareoffResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Epb_SquareoffResponse) ProtoMessage() {}

func (x *Epb_SquareoffResponse) ProtoReflect() protoreflect.Message {
	mi := &file_equsquoff_equSquareOff_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Epb_SquareoffResponse.ProtoReflect.Descriptor instead.
func (*Epb_SquareoffResponse) Descriptor() ([]byte, []int) {
	return file_equsquoff_equSquareOff_proto_rawDescGZIP(), []int{3}
}

func (x *Epb_SquareoffResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type Opt_SquareoffRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Otp  *OtpEq `protobuf:"bytes,4,opt,name=otp,proto3" json:"otp,omitempty"`
	Id   string `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
	Type string `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *Opt_SquareoffRequest) Reset() {
	*x = Opt_SquareoffRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_equsquoff_equSquareOff_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Opt_SquareoffRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Opt_SquareoffRequest) ProtoMessage() {}

func (x *Opt_SquareoffRequest) ProtoReflect() protoreflect.Message {
	mi := &file_equsquoff_equSquareOff_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Opt_SquareoffRequest.ProtoReflect.Descriptor instead.
func (*Opt_SquareoffRequest) Descriptor() ([]byte, []int) {
	return file_equsquoff_equSquareOff_proto_rawDescGZIP(), []int{4}
}

func (x *Opt_SquareoffRequest) GetOtp() *OtpEq {
	if x != nil {
		return x.Otp
	}
	return nil
}

func (x *Opt_SquareoffRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Opt_SquareoffRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type Otp_SquareoffResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *Otp_SquareoffResponse) Reset() {
	*x = Otp_SquareoffResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_equsquoff_equSquareOff_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Otp_SquareoffResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Otp_SquareoffResponse) ProtoMessage() {}

func (x *Otp_SquareoffResponse) ProtoReflect() protoreflect.Message {
	mi := &file_equsquoff_equSquareOff_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Otp_SquareoffResponse.ProtoReflect.Descriptor instead.
func (*Otp_SquareoffResponse) Descriptor() ([]byte, []int) {
	return file_equsquoff_equSquareOff_proto_rawDescGZIP(), []int{5}
}

func (x *Otp_SquareoffResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

var File_equsquoff_equSquareOff_proto protoreflect.FileDescriptor

var file_equsquoff_equSquareOff_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x65, 0x71, 0x75, 0x73, 0x71, 0x75, 0x6f, 0x66, 0x66, 0x2f, 0x65, 0x71, 0x75, 0x53,
	0x71, 0x75, 0x61, 0x72, 0x65, 0x4f, 0x66, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09,
	0x65, 0x71, 0x75, 0x73, 0x71, 0x75, 0x6f, 0x66, 0x66, 0x22, 0xda, 0x06, 0x0a, 0x05, 0x4f, 0x74,
	0x70, 0x45, 0x71, 0x12, 0x26, 0x0a, 0x0e, 0x4f, 0x74, 0x70, 0x43, 0x6c, 0x6d, 0x4d, 0x74, 0x63,
	0x68, 0x41, 0x63, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x4f, 0x74, 0x70,
	0x43, 0x6c, 0x6d, 0x4d, 0x74, 0x63, 0x68, 0x41, 0x63, 0x63, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x4f,
	0x74, 0x70, 0x58, 0x63, 0x68, 0x6e, 0x67, 0x43, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x4f, 0x74, 0x70, 0x58, 0x63, 0x68, 0x6e, 0x67, 0x43, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x4f,
	0x74, 0x70, 0x58, 0x63, 0x68, 0x6e, 0x67, 0x53, 0x67, 0x6d, 0x6e, 0x74, 0x43, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4f, 0x74, 0x70, 0x58, 0x63, 0x68, 0x6e, 0x67, 0x53, 0x67,
	0x6d, 0x6e, 0x74, 0x43, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x4f, 0x74, 0x70, 0x58, 0x63, 0x68, 0x6e,
	0x67, 0x53, 0x67, 0x6d, 0x6e, 0x74, 0x53, 0x74, 0x74, 0x6c, 0x6d, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x14, 0x4f, 0x74, 0x70, 0x58, 0x63, 0x68, 0x6e, 0x67, 0x53, 0x67, 0x6d,
	0x6e, 0x74, 0x53, 0x74, 0x74, 0x6c, 0x6d, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x74, 0x70,
	0x53, 0x74, 0x63, 0x6b, 0x43, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4f, 0x74,
	0x70, 0x53, 0x74, 0x63, 0x6b, 0x43, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x74, 0x70, 0x46, 0x6c,
	0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4f, 0x74, 0x70, 0x46, 0x6c, 0x77, 0x12,
	0x16, 0x0a, 0x06, 0x4f, 0x74, 0x70, 0x51, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x4f, 0x74, 0x70, 0x51, 0x74, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x4f, 0x74, 0x70, 0x43, 0x6e,
	0x76, 0x72, 0x74, 0x44, 0x6c, 0x76, 0x72, 0x79, 0x51, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x10, 0x4f, 0x74, 0x70, 0x43, 0x6e, 0x76, 0x72, 0x74, 0x44, 0x6c, 0x76, 0x72, 0x79,
	0x51, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x74, 0x70, 0x43, 0x76, 0x72, 0x64, 0x51, 0x74,
	0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x4f, 0x74, 0x70, 0x43, 0x76, 0x72, 0x64,
	0x51, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x4f, 0x74, 0x70, 0x52, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x05, 0x4f, 0x74, 0x70, 0x52, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x74, 0x70,
	0x4d, 0x72, 0x67, 0x6e, 0x41, 0x6d, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x4f,
	0x74, 0x70, 0x4d, 0x72, 0x67, 0x6e, 0x41, 0x6d, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x74, 0x70,
	0x54, 0x72, 0x64, 0x56, 0x61, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x4f, 0x74,
	0x70, 0x54, 0x72, 0x64, 0x56, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x74, 0x70, 0x52, 0x6d,
	0x72, 0x6b, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4f, 0x74, 0x70, 0x52, 0x6d,
	0x72, 0x6b, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x4f, 0x74, 0x70, 0x58, 0x66, 0x65, 0x72, 0x4d, 0x72,
	0x67, 0x6e, 0x53, 0x74, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4f, 0x74,
	0x70, 0x58, 0x66, 0x65, 0x72, 0x4d, 0x72, 0x67, 0x6e, 0x53, 0x74, 0x74, 0x73, 0x12, 0x2a, 0x0a,
	0x10, 0x4f, 0x74, 0x70, 0x53, 0x65, 0x6c, 0x6c, 0x4f, 0x70, 0x6e, 0x50, 0x72, 0x63, 0x63, 0x73,
	0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x4f, 0x74, 0x70, 0x53, 0x65, 0x6c, 0x6c,
	0x4f, 0x70, 0x6e, 0x50, 0x72, 0x63, 0x63, 0x73, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x4f, 0x74, 0x70,
	0x42, 0x75, 0x79, 0x4f, 0x70, 0x6e, 0x50, 0x72, 0x63, 0x63, 0x73, 0x64, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x4f, 0x74, 0x70, 0x42, 0x75, 0x79, 0x4f, 0x70, 0x6e, 0x50, 0x72, 0x63,
	0x63, 0x73, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x4f, 0x74, 0x70, 0x4d, 0x72, 0x67, 0x6e, 0x53, 0x71,
	0x72, 0x6f, 0x66, 0x66, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x4f, 0x74, 0x70, 0x4d, 0x72, 0x67, 0x6e, 0x53, 0x71, 0x72, 0x6f, 0x66, 0x66, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x30, 0x0a, 0x13, 0x4f, 0x74, 0x70, 0x45, 0x6d, 0x54, 0x72, 0x64, 0x73, 0x70, 0x6c,
	0x74, 0x50, 0x72, 0x63, 0x73, 0x46, 0x6c, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x4f, 0x74, 0x70, 0x45, 0x6d, 0x54, 0x72, 0x64, 0x73, 0x70, 0x6c, 0x74, 0x50, 0x72, 0x63, 0x73,
	0x46, 0x6c, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x74, 0x70, 0x4d, 0x74, 0x6d, 0x46, 0x6c, 0x67,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4f, 0x74, 0x70, 0x4d, 0x74, 0x6d, 0x46, 0x6c,
	0x67, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x74, 0x70, 0x4d, 0x74, 0x6d, 0x43, 0x61, 0x6e, 0x73, 0x71,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x74, 0x70, 0x4d, 0x74, 0x6d, 0x43, 0x61,
	0x6e, 0x73, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x74, 0x70, 0x45, 0x6f, 0x73, 0x43, 0x61, 0x6e,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4f, 0x74, 0x70, 0x45, 0x6f, 0x73, 0x43, 0x61,
	0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x74, 0x70, 0x54, 0x72, 0x67, 0x72, 0x50, 0x72, 0x63, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x4f, 0x74, 0x70, 0x54, 0x72, 0x67, 0x72, 0x50, 0x72,
	0x63, 0x12, 0x23, 0x0a, 0x0d, 0x4f, 0x74, 0x70, 0x5f, 0x31, 0x36, 0x54, 0x72, 0x67, 0x72, 0x50,
	0x72, 0x63, 0x18, 0x17, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x4f, 0x74, 0x70, 0x31, 0x36, 0x54,
	0x72, 0x67, 0x72, 0x50, 0x72, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x74, 0x70, 0x4d, 0x69, 0x6e,
	0x4d, 0x72, 0x67, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x4f, 0x74, 0x70, 0x4d,
	0x69, 0x6e, 0x4d, 0x72, 0x67, 0x6e, 0x22, 0xa4, 0x0d, 0x0a, 0x05, 0x45, 0x70, 0x62, 0x45, 0x71,
	0x12, 0x28, 0x0a, 0x0f, 0x45, 0x70, 0x62, 0x43, 0x6c, 0x6d, 0x4d, 0x74, 0x63, 0x68, 0x41, 0x63,
	0x63, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x45, 0x70, 0x62, 0x43, 0x6c,
	0x6d, 0x4d, 0x74, 0x63, 0x68, 0x41, 0x63, 0x63, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x70,
	0x62, 0x58, 0x63, 0x68, 0x6e, 0x67, 0x43, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x45, 0x70, 0x62, 0x58, 0x63, 0x68, 0x6e, 0x67, 0x43, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x45, 0x70,
	0x62, 0x58, 0x63, 0x68, 0x6e, 0x67, 0x53, 0x67, 0x6d, 0x6e, 0x74, 0x43, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x45, 0x70, 0x62, 0x58, 0x63, 0x68, 0x6e, 0x67, 0x53, 0x67, 0x6d,
	0x6e, 0x74, 0x43, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x45, 0x70, 0x62, 0x58, 0x63, 0x68, 0x6e, 0x67,
	0x53, 0x67, 0x6d, 0x6e, 0x74, 0x53, 0x74, 0x74, 0x6c, 0x6d, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x14, 0x45, 0x70, 0x62, 0x58, 0x63, 0x68, 0x6e, 0x67, 0x53, 0x67, 0x6d, 0x6e,
	0x74, 0x53, 0x74, 0x74, 0x6c, 0x6d, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x70, 0x62, 0x53,
	0x74, 0x63, 0x6b, 0x43, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x45, 0x70, 0x62,
	0x53, 0x74, 0x63, 0x6b, 0x43, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x45, 0x70, 0x62, 0x4f, 0x72, 0x67,
	0x6e, 0x6c, 0x50, 0x73, 0x74, 0x6e, 0x51, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x45, 0x70, 0x62, 0x4f, 0x72, 0x67, 0x6e, 0x6c, 0x50, 0x73, 0x74, 0x6e, 0x51, 0x74, 0x79,
	0x12, 0x18, 0x0a, 0x07, 0x45, 0x70, 0x62, 0x52, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x07, 0x45, 0x70, 0x62, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x45, 0x70,
	0x62, 0x4f, 0x72, 0x67, 0x6e, 0x6c, 0x41, 0x6d, 0x74, 0x50, 0x61, 0x79, 0x62, 0x6c, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x45, 0x70, 0x62, 0x4f, 0x72, 0x67, 0x6e, 0x6c, 0x41,
	0x6d, 0x74, 0x50, 0x61, 0x79, 0x62, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x45, 0x70, 0x62, 0x4f,
	0x72, 0x67, 0x6e, 0x6c, 0x4d, 0x72, 0x67, 0x6e, 0x41, 0x6d, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0f, 0x45, 0x70, 0x62, 0x4f, 0x72, 0x67, 0x6e, 0x6c, 0x4d, 0x72, 0x67, 0x6e, 0x41,
	0x6d, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x70, 0x62, 0x53, 0x65, 0x6c, 0x6c, 0x51, 0x74, 0x79,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x45, 0x70, 0x62, 0x53, 0x65, 0x6c, 0x6c, 0x51,
	0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x70, 0x62, 0x43, 0x76, 0x72, 0x4f, 0x72, 0x64, 0x51,
	0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x45, 0x70, 0x62, 0x43, 0x76, 0x72,
	0x4f, 0x72, 0x64, 0x51, 0x74, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x45, 0x70, 0x62, 0x4e, 0x65, 0x74,
	0x4d, 0x72, 0x67, 0x6e, 0x41, 0x6d, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x45,
	0x70, 0x62, 0x4e, 0x65, 0x74, 0x4d, 0x72, 0x67, 0x6e, 0x41, 0x6d, 0x74, 0x12, 0x28, 0x0a, 0x0f,
	0x45, 0x70, 0x62, 0x4e, 0x65, 0x74, 0x41, 0x6d, 0x74, 0x50, 0x61, 0x79, 0x62, 0x6c, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x45, 0x70, 0x62, 0x4e, 0x65, 0x74, 0x41, 0x6d, 0x74,
	0x50, 0x61, 0x79, 0x62, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x45, 0x70, 0x62, 0x4e, 0x65, 0x74,
	0x50, 0x73, 0x74, 0x6e, 0x51, 0x74, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x45,
	0x70, 0x62, 0x4e, 0x65, 0x74, 0x50, 0x73, 0x74, 0x6e, 0x51, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09,
	0x45, 0x70, 0x62, 0x43, 0x74, 0x64, 0x51, 0x74, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x45, 0x70, 0x62, 0x43, 0x74, 0x64, 0x51, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x70,
	0x62, 0x50, 0x73, 0x74, 0x6e, 0x53, 0x74, 0x74, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x45, 0x70, 0x62, 0x50, 0x73, 0x74, 0x6e, 0x53, 0x74, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0e,
	0x45, 0x70, 0x62, 0x4c, 0x70, 0x63, 0x43, 0x61, 0x6c, 0x63, 0x53, 0x74, 0x74, 0x73, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x45, 0x70, 0x62, 0x4c, 0x70, 0x63, 0x43, 0x61, 0x6c, 0x63,
	0x53, 0x74, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x45, 0x70, 0x62, 0x53, 0x71, 0x72, 0x6f, 0x66,
	0x66, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x45, 0x70, 0x62,
	0x53, 0x71, 0x72, 0x6f, 0x66, 0x66, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x70,
	0x62, 0x50, 0x73, 0x74, 0x6e, 0x54, 0x72, 0x64, 0x44, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x45, 0x70, 0x62, 0x50, 0x73, 0x74, 0x6e, 0x54, 0x72, 0x64, 0x44, 0x74, 0x12, 0x24,
	0x0a, 0x0d, 0x45, 0x70, 0x62, 0x4d, 0x74, 0x6d, 0x50, 0x72, 0x63, 0x73, 0x46, 0x6c, 0x67, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x45, 0x70, 0x62, 0x4d, 0x74, 0x6d, 0x50, 0x72, 0x63,
	0x73, 0x46, 0x6c, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x70, 0x62, 0x4c, 0x61, 0x73, 0x74, 0x4d,
	0x64, 0x66, 0x63, 0x6e, 0x44, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x45, 0x70,
	0x62, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x64, 0x66, 0x63, 0x6e, 0x44, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x45, 0x70, 0x62, 0x49, 0x6e, 0x73, 0x44, 0x61, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x45, 0x70, 0x62, 0x49, 0x6e, 0x73, 0x44, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x45, 0x70, 0x62, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x45, 0x70, 0x62, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x45, 0x70, 0x62, 0x53, 0x79, 0x73, 0x46, 0x61, 0x69, 0x6c, 0x46, 0x6c,
	0x67, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x45, 0x70, 0x62, 0x53, 0x79, 0x73, 0x46,
	0x61, 0x69, 0x6c, 0x46, 0x6c, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x70, 0x62, 0x4c, 0x61, 0x73,
	0x74, 0x50, 0x79, 0x6d, 0x6e, 0x74, 0x44, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x45, 0x70, 0x62, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x79, 0x6d, 0x6e, 0x74, 0x44, 0x74, 0x12, 0x28,
	0x0a, 0x0f, 0x45, 0x70, 0x62, 0x4c, 0x70, 0x63, 0x43, 0x61, 0x6c, 0x63, 0x45, 0x6e, 0x64, 0x44,
	0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x45, 0x70, 0x62, 0x4c, 0x70, 0x63, 0x43,
	0x61, 0x6c, 0x63, 0x45, 0x6e, 0x64, 0x44, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x70, 0x62, 0x4d,
	0x74, 0x6d, 0x43, 0x61, 0x6e, 0x73, 0x71, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x45,
	0x70, 0x62, 0x4d, 0x74, 0x6d, 0x43, 0x61, 0x6e, 0x73, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x70,
	0x62, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x44, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x45, 0x70, 0x62, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x44, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x45, 0x70, 0x62, 0x4d, 0x69, 0x6e, 0x4d, 0x72, 0x67, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0a, 0x45, 0x70, 0x62, 0x4d, 0x69, 0x6e, 0x4d, 0x72, 0x67, 0x6e, 0x12, 0x2e, 0x0a, 0x12,
	0x45, 0x70, 0x62, 0x4d, 0x72, 0x67, 0x6e, 0x44, 0x62, 0x63, 0x72, 0x50, 0x72, 0x63, 0x73, 0x46,
	0x6c, 0x67, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x45, 0x70, 0x62, 0x4d, 0x72, 0x67,
	0x6e, 0x44, 0x62, 0x63, 0x72, 0x50, 0x72, 0x63, 0x73, 0x46, 0x6c, 0x67, 0x12, 0x18, 0x0a, 0x07,
	0x45, 0x70, 0x62, 0x44, 0x70, 0x49, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45,
	0x70, 0x62, 0x44, 0x70, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x70, 0x62, 0x44, 0x70, 0x43,
	0x6c, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x45, 0x70, 0x62,
	0x44, 0x70, 0x43, 0x6c, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x45, 0x70, 0x62, 0x50,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x53, 0x74, 0x74, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x45, 0x70, 0x62, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x53, 0x74, 0x74, 0x73, 0x12, 0x2c,
	0x0a, 0x11, 0x45, 0x70, 0x62, 0x42, 0x74, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x4d, 0x72, 0x67, 0x6e,
	0x41, 0x6d, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x45, 0x70, 0x62, 0x42, 0x74,
	0x73, 0x74, 0x4e, 0x65, 0x74, 0x4d, 0x72, 0x67, 0x6e, 0x41, 0x6d, 0x74, 0x12, 0x2a, 0x0a, 0x10,
	0x45, 0x70, 0x62, 0x42, 0x74, 0x73, 0x74, 0x4d, 0x72, 0x67, 0x6e, 0x42, 0x6c, 0x63, 0x6b, 0x64,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x45, 0x70, 0x62, 0x42, 0x74, 0x73, 0x74, 0x4d,
	0x72, 0x67, 0x6e, 0x42, 0x6c, 0x63, 0x6b, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x45, 0x70, 0x62, 0x42,
	0x74, 0x73, 0x74, 0x4d, 0x72, 0x67, 0x6e, 0x44, 0x62, 0x63, 0x72, 0x46, 0x6c, 0x67, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x45, 0x70, 0x62, 0x42, 0x74, 0x73, 0x74, 0x4d, 0x72, 0x67,
	0x6e, 0x44, 0x62, 0x63, 0x72, 0x46, 0x6c, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x70, 0x62, 0x42,
	0x74, 0x73, 0x74, 0x53, 0x67, 0x6d, 0x6e, 0x74, 0x43, 0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x45, 0x70, 0x62, 0x42, 0x74, 0x73, 0x74, 0x53, 0x67, 0x6d, 0x6e, 0x74, 0x43, 0x64,
	0x12, 0x24, 0x0a, 0x0d, 0x45, 0x70, 0x62, 0x42, 0x74, 0x73, 0x74, 0x53, 0x74, 0x6c, 0x6d, 0x6e,
	0x74, 0x18, 0x27, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x45, 0x70, 0x62, 0x42, 0x74, 0x73, 0x74,
	0x53, 0x74, 0x6c, 0x6d, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x45, 0x70, 0x62, 0x42, 0x74, 0x73,
	0x74, 0x43, 0x73, 0x68, 0x42, 0x6c, 0x63, 0x6b, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0f, 0x45, 0x70, 0x62, 0x42, 0x74, 0x73, 0x74, 0x43, 0x73, 0x68, 0x42, 0x6c, 0x63, 0x6b, 0x64,
	0x12, 0x28, 0x0a, 0x0f, 0x45, 0x70, 0x62, 0x42, 0x74, 0x73, 0x74, 0x53, 0x61, 0x6d, 0x42, 0x6c,
	0x63, 0x6b, 0x64, 0x18, 0x29, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x45, 0x70, 0x62, 0x42, 0x74,
	0x73, 0x74, 0x53, 0x61, 0x6d, 0x42, 0x6c, 0x63, 0x6b, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x45, 0x70,
	0x62, 0x42, 0x74, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x44, 0x74, 0x18, 0x2a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x45, 0x70, 0x62, 0x42, 0x74, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x44, 0x74,
	0x12, 0x24, 0x0a, 0x0d, 0x45, 0x70, 0x62, 0x44, 0x62, 0x63, 0x72, 0x43, 0x61, 0x6c, 0x63, 0x44,
	0x74, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x45, 0x70, 0x62, 0x44, 0x62, 0x63, 0x72,
	0x43, 0x61, 0x6c, 0x63, 0x44, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x70, 0x62, 0x4e, 0x73, 0x64,
	0x6c, 0x52, 0x65, 0x66, 0x4e, 0x6f, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x45, 0x70,
	0x62, 0x4e, 0x73, 0x64, 0x6c, 0x52, 0x65, 0x66, 0x4e, 0x6f, 0x12, 0x31, 0x0a, 0x15, 0x65, 0x70,
	0x62, 0x5f, 0x6d, 0x72, 0x67, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x68, 0x65, 0x6c, 0x64, 0x5f,
	0x66, 0x6c, 0x67, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x65, 0x70, 0x62, 0x4d, 0x72,
	0x67, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x68, 0x65, 0x6c, 0x64, 0x46, 0x6c, 0x67, 0x22, 0x5e, 0x0a,
	0x14, 0x45, 0x70, 0x62, 0x5f, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x6f, 0x66, 0x66, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x03, 0x65, 0x70, 0x62, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x71, 0x75, 0x73, 0x71, 0x75, 0x6f, 0x66, 0x66, 0x2e, 0x45,
	0x70, 0x62, 0x45, 0x71, 0x52, 0x03, 0x65, 0x70, 0x62, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x31, 0x0a,
	0x15, 0x45, 0x70, 0x62, 0x5f, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x6f, 0x66, 0x66, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x22, 0x5e, 0x0a, 0x14, 0x4f, 0x70, 0x74, 0x5f, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x6f, 0x66,
	0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x03, 0x6f, 0x74, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x71, 0x75, 0x73, 0x71, 0x75, 0x6f, 0x66,
	0x66, 0x2e, 0x4f, 0x74, 0x70, 0x45, 0x71, 0x52, 0x03, 0x6f, 0x74, 0x70, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x31, 0x0a, 0x15, 0x4f, 0x74, 0x70, 0x5f, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x6f, 0x66,
	0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x32, 0xb2, 0x01, 0x0a, 0x08, 0x53, 0x71, 0x75, 0x72, 0x65, 0x6f, 0x66, 0x66,
	0x12, 0x52, 0x0a, 0x0d, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x6f, 0x66, 0x66, 0x5f, 0x45, 0x70,
	0x62, 0x12, 0x1f, 0x2e, 0x65, 0x71, 0x75, 0x73, 0x71, 0x75, 0x6f, 0x66, 0x66, 0x2e, 0x45, 0x70,
	0x62, 0x5f, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x6f, 0x66, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x20, 0x2e, 0x65, 0x71, 0x75, 0x73, 0x71, 0x75, 0x6f, 0x66, 0x66, 0x2e, 0x45,
	0x70, 0x62, 0x5f, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x6f, 0x66, 0x66, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x0d, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x6f, 0x66,
	0x66, 0x5f, 0x4f, 0x74, 0x70, 0x12, 0x1f, 0x2e, 0x65, 0x71, 0x75, 0x73, 0x71, 0x75, 0x6f, 0x66,
	0x66, 0x2e, 0x4f, 0x70, 0x74, 0x5f, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x6f, 0x66, 0x66, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x65, 0x71, 0x75, 0x73, 0x71, 0x75, 0x6f,
	0x66, 0x66, 0x2e, 0x4f, 0x74, 0x70, 0x5f, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x6f, 0x66, 0x66,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x03, 0x5a, 0x01, 0x2e, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_equsquoff_equSquareOff_proto_rawDescOnce sync.Once
	file_equsquoff_equSquareOff_proto_rawDescData = file_equsquoff_equSquareOff_proto_rawDesc
)

func file_equsquoff_equSquareOff_proto_rawDescGZIP() []byte {
	file_equsquoff_equSquareOff_proto_rawDescOnce.Do(func() {
		file_equsquoff_equSquareOff_proto_rawDescData = protoimpl.X.CompressGZIP(file_equsquoff_equSquareOff_proto_rawDescData)
	})
	return file_equsquoff_equSquareOff_proto_rawDescData
}

var file_equsquoff_equSquareOff_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_equsquoff_equSquareOff_proto_goTypes = []any{
	(*OtpEq)(nil),                 // 0: equsquoff.OtpEq
	(*EpbEq)(nil),                 // 1: equsquoff.EpbEq
	(*Epb_SquareoffRequest)(nil),  // 2: equsquoff.Epb_SquareoffRequest
	(*Epb_SquareoffResponse)(nil), // 3: equsquoff.Epb_SquareoffResponse
	(*Opt_SquareoffRequest)(nil),  // 4: equsquoff.Opt_SquareoffRequest
	(*Otp_SquareoffResponse)(nil), // 5: equsquoff.Otp_SquareoffResponse
}
var file_equsquoff_equSquareOff_proto_depIdxs = []int32{
	1, // 0: equsquoff.Epb_SquareoffRequest.epb:type_name -> equsquoff.EpbEq
	0, // 1: equsquoff.Opt_SquareoffRequest.otp:type_name -> equsquoff.OtpEq
	2, // 2: equsquoff.Squreoff.Squareoff_Epb:input_type -> equsquoff.Epb_SquareoffRequest
	4, // 3: equsquoff.Squreoff.Squareoff_Otp:input_type -> equsquoff.Opt_SquareoffRequest
	3, // 4: equsquoff.Squreoff.Squareoff_Epb:output_type -> equsquoff.Epb_SquareoffResponse
	5, // 5: equsquoff.Squreoff.Squareoff_Otp:output_type -> equsquoff.Otp_SquareoffResponse
	4, // [4:6] is the sub-list for method output_type
	2, // [2:4] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_equsquoff_equSquareOff_proto_init() }
func file_equsquoff_equSquareOff_proto_init() {
	if File_equsquoff_equSquareOff_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_equsquoff_equSquareOff_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*OtpEq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_equsquoff_equSquareOff_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*EpbEq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_equsquoff_equSquareOff_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Epb_SquareoffRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_equsquoff_equSquareOff_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*Epb_SquareoffResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_equsquoff_equSquareOff_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*Opt_SquareoffRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_equsquoff_equSquareOff_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*Otp_SquareoffResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_equsquoff_equSquareOff_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_equsquoff_equSquareOff_proto_goTypes,
		DependencyIndexes: file_equsquoff_equSquareOff_proto_depIdxs,
		MessageInfos:      file_equsquoff_equSquareOff_proto_msgTypes,
	}.Build()
	File_equsquoff_equSquareOff_proto = out.File
	file_equsquoff_equSquareOff_proto_rawDesc = nil
	file_equsquoff_equSquareOff_proto_goTypes = nil
	file_equsquoff_equSquareOff_proto_depIdxs = nil
}
