// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.1
// source: equordr/equOrderDetails.proto

package __

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EquityOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrdClmMtchAccnt string `protobuf:"bytes,1,opt,name=ord_clm_mtch_accnt,json=ordClmMtchAccnt,proto3" json:"ord_clm_mtch_accnt,omitempty"`
}

func (x *EquityOrderRequest) Reset() {
	*x = EquityOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_equordr_equOrderDetails_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquityOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquityOrderRequest) ProtoMessage() {}

func (x *EquityOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_equordr_equOrderDetails_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquityOrderRequest.ProtoReflect.Descriptor instead.
func (*EquityOrderRequest) Descriptor() ([]byte, []int) {
	return file_equordr_equOrderDetails_proto_rawDescGZIP(), []int{0}
}

func (x *EquityOrderRequest) GetOrdClmMtchAccnt() string {
	if x != nil {
		return x.OrdClmMtchAccnt
	}
	return ""
}

type EquityOrderDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrdClmMtchAccnt      string  `protobuf:"bytes,1,opt,name=ord_clm_mtch_accnt,json=ordClmMtchAccnt,proto3" json:"ord_clm_mtch_accnt,omitempty"`
	OrdOrdrRfrnc         string  `protobuf:"bytes,2,opt,name=ord_ordr_rfrnc,json=ordOrdrRfrnc,proto3" json:"ord_ordr_rfrnc,omitempty"`
	OrdXchngCd           string  `protobuf:"bytes,3,opt,name=ord_xchng_cd,json=ordXchngCd,proto3" json:"ord_xchng_cd,omitempty"`
	OrdStckCd            string  `protobuf:"bytes,4,opt,name=ord_stck_cd,json=ordStckCd,proto3" json:"ord_stck_cd,omitempty"`
	OrdXchngSgmntCd      string  `protobuf:"bytes,5,opt,name=ord_xchng_sgmnt_cd,json=ordXchngSgmntCd,proto3" json:"ord_xchng_sgmnt_cd,omitempty"`
	OrdXchngSgmntSttlmnt int32   `protobuf:"varint,6,opt,name=ord_xchng_sgmnt_sttlmnt,json=ordXchngSgmntSttlmnt,proto3" json:"ord_xchng_sgmnt_sttlmnt,omitempty"`
	OrdOrdrDt            string  `protobuf:"bytes,7,opt,name=ord_ordr_dt,json=ordOrdrDt,proto3" json:"ord_ordr_dt,omitempty"`
	OrdOrdrFlw           string  `protobuf:"bytes,8,opt,name=ord_ordr_flw,json=ordOrdrFlw,proto3" json:"ord_ordr_flw,omitempty"`
	OrdPrdctTyp          string  `protobuf:"bytes,9,opt,name=ord_prdct_typ,json=ordPrdctTyp,proto3" json:"ord_prdct_typ,omitempty"`
	OrdOrdrQty           int32   `protobuf:"varint,10,opt,name=ord_ordr_qty,json=ordOrdrQty,proto3" json:"ord_ordr_qty,omitempty"`
	OrdLmtMrktFlg        string  `protobuf:"bytes,11,opt,name=ord_lmt_mrkt_flg,json=ordLmtMrktFlg,proto3" json:"ord_lmt_mrkt_flg,omitempty"`
	OrdLmtRt             float64 `protobuf:"fixed64,12,opt,name=ord_lmt_rt,json=ordLmtRt,proto3" json:"ord_lmt_rt,omitempty"`
	OrdDsclsdQty         int32   `protobuf:"varint,13,opt,name=ord_dsclsd_qty,json=ordDsclsdQty,proto3" json:"ord_dsclsd_qty,omitempty"`
	OrdStpLssTgr         float64 `protobuf:"fixed64,14,opt,name=ord_stp_lss_tgr,json=ordStpLssTgr,proto3" json:"ord_stp_lss_tgr,omitempty"`
	OrdOrdrStts          string  `protobuf:"bytes,15,opt,name=ord_ordr_stts,json=ordOrdrStts,proto3" json:"ord_ordr_stts,omitempty"`
	OrdTrdDt             string  `protobuf:"bytes,16,opt,name=ord_trd_dt,json=ordTrdDt,proto3" json:"ord_trd_dt,omitempty"`
	OrdSubBrkrTag        string  `protobuf:"bytes,17,opt,name=ord_sub_brkr_tag,json=ordSubBrkrTag,proto3" json:"ord_sub_brkr_tag,omitempty"`
	OrdMdfctnCntr        int32   `protobuf:"varint,18,opt,name=ord_mdfctn_cntr,json=ordMdfctnCntr,proto3" json:"ord_mdfctn_cntr,omitempty"`
	OrdAckNmbr           string  `protobuf:"bytes,19,opt,name=ord_ack_nmbr,json=ordAckNmbr,proto3" json:"ord_ack_nmbr,omitempty"`
	OrdXchngAckOld       float64 `protobuf:"fixed64,20,opt,name=ord_xchng_ack_old,json=ordXchngAckOld,proto3" json:"ord_xchng_ack_old,omitempty"`
	OrdExctdQty          int32   `protobuf:"varint,21,opt,name=ord_exctd_qty,json=ordExctdQty,proto3" json:"ord_exctd_qty,omitempty"`
	OrdAmtBlckd          float64 `protobuf:"fixed64,22,opt,name=ord_amt_blckd,json=ordAmtBlckd,proto3" json:"ord_amt_blckd,omitempty"`
	OrdBrkrgVal          float64 `protobuf:"fixed64,23,opt,name=ord_brkrg_val,json=ordBrkrgVal,proto3" json:"ord_brkrg_val,omitempty"`
	OrdDpId              string  `protobuf:"bytes,24,opt,name=ord_dp_id,json=ordDpId,proto3" json:"ord_dp_id,omitempty"`
	OrdDpClntId          string  `protobuf:"bytes,25,opt,name=ord_dp_clnt_id,json=ordDpClntId,proto3" json:"ord_dp_clnt_id,omitempty"`
	OrdPhyQty            int32   `protobuf:"varint,26,opt,name=ord_phy_qty,json=ordPhyQty,proto3" json:"ord_phy_qty,omitempty"`
	OrdIsinNmbr          string  `protobuf:"bytes,27,opt,name=ord_isin_nmbr,json=ordIsinNmbr,proto3" json:"ord_isin_nmbr,omitempty"`
	OrdNdFlg             string  `protobuf:"bytes,28,opt,name=ord_nd_flg,json=ordNdFlg,proto3" json:"ord_nd_flg,omitempty"`
	OrdMscChar           string  `protobuf:"bytes,29,opt,name=ord_msc_char,json=ordMscChar,proto3" json:"ord_msc_char,omitempty"`
	OrdMscVarchar        string  `protobuf:"bytes,30,opt,name=ord_msc_varchar,json=ordMscVarchar,proto3" json:"ord_msc_varchar,omitempty"`
	OrdMscInt            float64 `protobuf:"fixed64,31,opt,name=ord_msc_int,json=ordMscInt,proto3" json:"ord_msc_int,omitempty"`
	OrdPlcdStts          string  `protobuf:"bytes,32,opt,name=ord_plcd_stts,json=ordPlcdStts,proto3" json:"ord_plcd_stts,omitempty"`
	OrdQtyBlckd          int32   `protobuf:"varint,33,opt,name=ord_qty_blckd,json=ordQtyBlckd,proto3" json:"ord_qty_blckd,omitempty"`
	OrdMrgnPrcntg        float64 `protobuf:"fixed64,34,opt,name=ord_mrgn_prcntg,json=ordMrgnPrcntg,proto3" json:"ord_mrgn_prcntg,omitempty"`
	OrdIpoFlg            string  `protobuf:"bytes,35,opt,name=ord_ipo_flg,json=ordIpoFlg,proto3" json:"ord_ipo_flg,omitempty"`
	OrdLssAmtBlckd       float64 `protobuf:"fixed64,36,opt,name=ord_lss_amt_blckd,json=ordLssAmtBlckd,proto3" json:"ord_lss_amt_blckd,omitempty"`
	OrdLssQty            int64   `protobuf:"varint,37,opt,name=ord_lss_qty,json=ordLssQty,proto3" json:"ord_lss_qty,omitempty"`
	OrdMtmFlg            string  `protobuf:"bytes,38,opt,name=ord_mtm_flg,json=ordMtmFlg,proto3" json:"ord_mtm_flg,omitempty"`
	OrdSqFlg             string  `protobuf:"bytes,39,opt,name=ord_sq_flg,json=ordSqFlg,proto3" json:"ord_sq_flg,omitempty"`
	OrdSchmId            string  `protobuf:"bytes,40,opt,name=ord_schm_id,json=ordSchmId,proto3" json:"ord_schm_id,omitempty"`
	OrdPipeId            string  `protobuf:"bytes,41,opt,name=ord_pipe_id,json=ordPipeId,proto3" json:"ord_pipe_id,omitempty"`
	OrdPrtctnRt          float64 `protobuf:"fixed64,42,opt,name=ord_prtctn_rt,json=ordPrtctnRt,proto3" json:"ord_prtctn_rt,omitempty"`
	OrdSlTrgFlg          string  `protobuf:"bytes,43,opt,name=ord_sl_trg_flg,json=ordSlTrgFlg,proto3" json:"ord_sl_trg_flg,omitempty"`
	OrdXchngUsrId        int32   `protobuf:"varint,44,opt,name=ord_xchng_usr_id,json=ordXchngUsrId,proto3" json:"ord_xchng_usr_id,omitempty"`
	OrdBtstSttlmntNmbr   int32   `protobuf:"varint,45,opt,name=ord_btst_sttlmnt_nmbr,json=ordBtstSttlmntNmbr,proto3" json:"ord_btst_sttlmnt_nmbr,omitempty"`
	OrdBtstSgmntCd       string  `protobuf:"bytes,46,opt,name=ord_btst_sgmnt_cd,json=ordBtstSgmntCd,proto3" json:"ord_btst_sgmnt_cd,omitempty"`
	OrdChannel           string  `protobuf:"bytes,47,opt,name=ord_channel,json=ordChannel,proto3" json:"ord_channel,omitempty"`
	OrdBpId              string  `protobuf:"bytes,48,opt,name=ord_bp_id,json=ordBpId,proto3" json:"ord_bp_id,omitempty"`
	OrdSltpOrdrRfrnc     string  `protobuf:"bytes,49,opt,name=ord_sltp_ordr_rfrnc,json=ordSltpOrdrRfrnc,proto3" json:"ord_sltp_ordr_rfrnc,omitempty"`
	OrdCtclId            string  `protobuf:"bytes,50,opt,name=ord_ctcl_id,json=ordCtclId,proto3" json:"ord_ctcl_id,omitempty"`
	OrdUsrId             string  `protobuf:"bytes,51,opt,name=ord_usr_id,json=ordUsrId,proto3" json:"ord_usr_id,omitempty"`
	OrdCntId             int32   `protobuf:"varint,52,opt,name=ord_cnt_id,json=ordCntId,proto3" json:"ord_cnt_id,omitempty"`
	OrdEmSettlmntNmbr    int32   `protobuf:"varint,53,opt,name=ord_em_settlmnt_nmbr,json=ordEmSettlmntNmbr,proto3" json:"ord_em_settlmnt_nmbr,omitempty"`
	OrdMrgnSqroffMode    string  `protobuf:"bytes,54,opt,name=ord_mrgn_sqroff_mode,json=ordMrgnSqroffMode,proto3" json:"ord_mrgn_sqroff_mode,omitempty"`
	OrdCnclQty           int32   `protobuf:"varint,55,opt,name=ord_cncl_qty,json=ordCnclQty,proto3" json:"ord_cncl_qty,omitempty"`
	OrdOrdrTyp           string  `protobuf:"bytes,56,opt,name=ord_ordr_typ,json=ordOrdrTyp,proto3" json:"ord_ordr_typ,omitempty"`
	OrdValidDt           string  `protobuf:"bytes,57,opt,name=ord_valid_dt,json=ordValidDt,proto3" json:"ord_valid_dt,omitempty"`
	OrdCalFlg            string  `protobuf:"bytes,58,opt,name=ord_cal_flg,json=ordCalFlg,proto3" json:"ord_cal_flg,omitempty"`
	OrdXchngAck          string  `protobuf:"bytes,59,opt,name=ord_xchng_ack,json=ordXchngAck,proto3" json:"ord_xchng_ack,omitempty"`
	OrdEmRollovrFlg      string  `protobuf:"bytes,60,opt,name=ord_em_rollovr_flg,json=ordEmRollovrFlg,proto3" json:"ord_em_rollovr_flg,omitempty"`
	OrdTrdVal            float64 `protobuf:"fixed64,61,opt,name=ord_trd_val,json=ordTrdVal,proto3" json:"ord_trd_val,omitempty"`
	OrdTrdCntrctNmbr     string  `protobuf:"bytes,62,opt,name=ord_trd_cntrct_nmbr,json=ordTrdCntrctNmbr,proto3" json:"ord_trd_cntrct_nmbr,omitempty"`
	OrdAvgExctdRt        float64 `protobuf:"fixed64,63,opt,name=ord_avg_exctd_rt,json=ordAvgExctdRt,proto3" json:"ord_avg_exctd_rt,omitempty"`
	OrdPrcImpFlg         string  `protobuf:"bytes,64,opt,name=ord_prc_imp_flg,json=ordPrcImpFlg,proto3" json:"ord_prc_imp_flg,omitempty"`
	OrdMbcFlg            string  `protobuf:"bytes,65,opt,name=ord_mbc_flg,json=ordMbcFlg,proto3" json:"ord_mbc_flg,omitempty"`
	OrdTrlAmt            float64 `protobuf:"fixed64,66,opt,name=ord_trl_amt,json=ordTrlAmt,proto3" json:"ord_trl_amt,omitempty"`
	OrdLmtOffst          float64 `protobuf:"fixed64,67,opt,name=ord_lmt_offst,json=ordLmtOffst,proto3" json:"ord_lmt_offst,omitempty"`
	OrdSourceFlg         string  `protobuf:"bytes,68,opt,name=ord_source_flg,json=ordSourceFlg,proto3" json:"ord_source_flg,omitempty"`
	OrdPanNo             string  `protobuf:"bytes,69,opt,name=ord_pan_no,json=ordPanNo,proto3" json:"ord_pan_no,omitempty"`
	OrdAtmPayoutStts     string  `protobuf:"bytes,70,opt,name=ord_atm_payout_stts,json=ordAtmPayoutStts,proto3" json:"ord_atm_payout_stts,omitempty"`
	OrdEspCd             string  `protobuf:"bytes,71,opt,name=ord_esp_cd,json=ordEspCd,proto3" json:"ord_esp_cd,omitempty"`
	OrdRemarks           string  `protobuf:"bytes,72,opt,name=ord_remarks,json=ordRemarks,proto3" json:"ord_remarks,omitempty"`
	OrdWthldAmtStts      string  `protobuf:"bytes,73,opt,name=ord_wthld_amt_stts,json=ordWthldAmtStts,proto3" json:"ord_wthld_amt_stts,omitempty"`
	OrdPstnXchngCd       string  `protobuf:"bytes,74,opt,name=ord_pstn_xchng_cd,json=ordPstnXchngCd,proto3" json:"ord_pstn_xchng_cd,omitempty"`
	OrdInteropOrdFlg     string  `protobuf:"bytes,75,opt,name=ord_interop_ord_flg,json=ordInteropOrdFlg,proto3" json:"ord_interop_ord_flg,omitempty"`
	OrdSettlementPeriod  int32   `protobuf:"varint,76,opt,name=ord_settlement_period,json=ordSettlementPeriod,proto3" json:"ord_settlement_period,omitempty"`
	OrdAlgoId            string  `protobuf:"bytes,77,opt,name=ord_algo_id,json=ordAlgoId,proto3" json:"ord_algo_id,omitempty"`
	OrdBundleName        string  `protobuf:"bytes,78,opt,name=ord_bundle_name,json=ordBundleName,proto3" json:"ord_bundle_name,omitempty"`
	OrdPrtFlg            string  `protobuf:"bytes,79,opt,name=ord_prt_flg,json=ordPrtFlg,proto3" json:"ord_prt_flg,omitempty"`
	OrdSrcTag            string  `protobuf:"bytes,80,opt,name=ord_src_tag,json=ordSrcTag,proto3" json:"ord_src_tag,omitempty"`
	OrdRlsAmt            float64 `protobuf:"fixed64,81,opt,name=ord_rls_amt,json=ordRlsAmt,proto3" json:"ord_rls_amt,omitempty"`
	OrdRlsDate           string  `protobuf:"bytes,82,opt,name=ord_rls_date,json=ordRlsDate,proto3" json:"ord_rls_date,omitempty"`
	OrdMtfUnplgSqroff    string  `protobuf:"bytes,83,opt,name=ord_mtf_unplg_sqroff,json=ordMtfUnplgSqroff,proto3" json:"ord_mtf_unplg_sqroff,omitempty"`
	OrdNOrdrQty          int32   `protobuf:"varint,84,opt,name=ord_n_ordr_qty,json=ordNOrdrQty,proto3" json:"ord_n_ordr_qty,omitempty"`
	OrdAckDate           string  `protobuf:"bytes,85,opt,name=ord_ack_date,json=ordAckDate,proto3" json:"ord_ack_date,omitempty"`
	OrdLastActivityRef   string  `protobuf:"bytes,86,opt,name=ord_last_activity_ref,json=ordLastActivityRef,proto3" json:"ord_last_activity_ref,omitempty"`
	// string ord_clm_clnt_cd = 87;
	OrdClmClntCd *wrapperspb.StringValue `protobuf:"bytes,87,opt,name=ord_clm_clnt_cd,json=ordClmClntCd,proto3" json:"ord_clm_clnt_cd,omitempty"`
}

func (x *EquityOrderDetails) Reset() {
	*x = EquityOrderDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_equordr_equOrderDetails_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquityOrderDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquityOrderDetails) ProtoMessage() {}

func (x *EquityOrderDetails) ProtoReflect() protoreflect.Message {
	mi := &file_equordr_equOrderDetails_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquityOrderDetails.ProtoReflect.Descriptor instead.
func (*EquityOrderDetails) Descriptor() ([]byte, []int) {
	return file_equordr_equOrderDetails_proto_rawDescGZIP(), []int{1}
}

func (x *EquityOrderDetails) GetOrdClmMtchAccnt() string {
	if x != nil {
		return x.OrdClmMtchAccnt
	}
	return ""
}

func (x *EquityOrderDetails) GetOrdOrdrRfrnc() string {
	if x != nil {
		return x.OrdOrdrRfrnc
	}
	return ""
}

func (x *EquityOrderDetails) GetOrdXchngCd() string {
	if x != nil {
		return x.OrdXchngCd
	}
	return ""
}

func (x *EquityOrderDetails) GetOrdStckCd() string {
	if x != nil {
		return x.OrdStckCd
	}
	return ""
}

func (x *EquityOrderDetails) GetOrdXchngSgmntCd() string {
	if x != nil {
		return x.OrdXchngSgmntCd
	}
	return ""
}

func (x *EquityOrderDetails) GetOrdXchngSgmntSttlmnt() int32 {
	if x != nil {
		return x.OrdXchngSgmntSttlmnt
	}
	return 0
}

func (x *EquityOrderDetails) GetOrdOrdrDt() string {
	if x != nil {
		return x.OrdOrdrDt
	}
	return ""
}

func (x *EquityOrderDetails) GetOrdOrdrFlw() string {
	if x != nil {
		return x.OrdOrdrFlw
	}
	return ""
}

func (x *EquityOrderDetails) GetOrdPrdctTyp() string {
	if x != nil {
		return x.OrdPrdctTyp
	}
	return ""
}

func (x *EquityOrderDetails) GetOrdOrdrQty() int32 {
	if x != nil {
		return x.OrdOrdrQty
	}
	return 0
}

func (x *EquityOrderDetails) GetOrdLmtMrktFlg() string {
	if x != nil {
		return x.OrdLmtMrktFlg
	}
	return ""
}

func (x *EquityOrderDetails) GetOrdLmtRt() float64 {
	if x != nil {
		return x.OrdLmtRt
	}
	return 0
}

func (x *EquityOrderDetails) GetOrdDsclsdQty() int32 {
	if x != nil {
		return x.OrdDsclsdQty
	}
	return 0
}

func (x *EquityOrderDetails) GetOrdStpLssTgr() float64 {
	if x != nil {
		return x.OrdStpLssTgr
	}
	return 0
}

func (x *EquityOrderDetails) GetOrdOrdrStts() string {
	if x != nil {
		return x.OrdOrdrStts
	}
	return ""
}

func (x *EquityOrderDetails) GetOrdTrdDt() string {
	if x != nil {
		return x.OrdTrdDt
	}
	return ""
}

func (x *EquityOrderDetails) GetOrdSubBrkrTag() string {
	if x != nil {
		return x.OrdSubBrkrTag
	}
	return ""
}

func (x *EquityOrderDetails) GetOrdMdfctnCntr() int32 {
	if x != nil {
		return x.OrdMdfctnCntr
	}
	return 0
}

func (x *EquityOrderDetails) GetOrdAckNmbr() string {
	if x != nil {
		return x.OrdAckNmbr
	}
	return ""
}

func (x *EquityOrderDetails) GetOrdXchngAckOld() float64 {
	if x != nil {
		return x.OrdXchngAckOld
	}
	return 0
}

func (x *EquityOrderDetails) GetOrdExctdQty() int32 {
	if x != nil {
		return x.OrdExctdQty
	}
	return 0
}

func (x *EquityOrderDetails) GetOrdAmtBlckd() float64 {
	if x != nil {
		return x.OrdAmtBlckd
	}
	return 0
}

func (x *EquityOrderDetails) GetOrdBrkrgVal() float64 {
	if x != nil {
		return x.OrdBrkrgVal
	}
	return 0
}

func (x *EquityOrderDetails) GetOrdDpId() string {
	if x != nil {
		return x.OrdDpId
	}
	return ""
}

func (x *EquityOrderDetails) GetOrdDpClntId() string {
	if x != nil {
		return x.OrdDpClntId
	}
	return ""
}

func (x *EquityOrderDetails) GetOrdPhyQty() int32 {
	if x != nil {
		return x.OrdPhyQty
	}
	return 0
}

func (x *EquityOrderDetails) GetOrdIsinNmbr() string {
	if x != nil {
		return x.OrdIsinNmbr
	}
	return ""
}

func (x *EquityOrderDetails) GetOrdNdFlg() string {
	if x != nil {
		return x.OrdNdFlg
	}
	return ""
}

func (x *EquityOrderDetails) GetOrdMscChar() string {
	if x != nil {
		return x.OrdMscChar
	}
	return ""
}

func (x *EquityOrderDetails) GetOrdMscVarchar() string {
	if x != nil {
		return x.OrdMscVarchar
	}
	return ""
}

func (x *EquityOrderDetails) GetOrdMscInt() float64 {
	if x != nil {
		return x.OrdMscInt
	}
	return 0
}

func (x *EquityOrderDetails) GetOrdPlcdStts() string {
	if x != nil {
		return x.OrdPlcdStts
	}
	return ""
}

func (x *EquityOrderDetails) GetOrdQtyBlckd() int32 {
	if x != nil {
		return x.OrdQtyBlckd
	}
	return 0
}

func (x *EquityOrderDetails) GetOrdMrgnPrcntg() float64 {
	if x != nil {
		return x.OrdMrgnPrcntg
	}
	return 0
}

func (x *EquityOrderDetails) GetOrdIpoFlg() string {
	if x != nil {
		return x.OrdIpoFlg
	}
	return ""
}

func (x *EquityOrderDetails) GetOrdLssAmtBlckd() float64 {
	if x != nil {
		return x.OrdLssAmtBlckd
	}
	return 0
}

func (x *EquityOrderDetails) GetOrdLssQty() int64 {
	if x != nil {
		return x.OrdLssQty
	}
	return 0
}

func (x *EquityOrderDetails) GetOrdMtmFlg() string {
	if x != nil {
		return x.OrdMtmFlg
	}
	return ""
}

func (x *EquityOrderDetails) GetOrdSqFlg() string {
	if x != nil {
		return x.OrdSqFlg
	}
	return ""
}

func (x *EquityOrderDetails) GetOrdSchmId() string {
	if x != nil {
		return x.OrdSchmId
	}
	return ""
}

func (x *EquityOrderDetails) GetOrdPipeId() string {
	if x != nil {
		return x.OrdPipeId
	}
	return ""
}

func (x *EquityOrderDetails) GetOrdPrtctnRt() float64 {
	if x != nil {
		return x.OrdPrtctnRt
	}
	return 0
}

func (x *EquityOrderDetails) GetOrdSlTrgFlg() string {
	if x != nil {
		return x.OrdSlTrgFlg
	}
	return ""
}

func (x *EquityOrderDetails) GetOrdXchngUsrId() int32 {
	if x != nil {
		return x.OrdXchngUsrId
	}
	return 0
}

func (x *EquityOrderDetails) GetOrdBtstSttlmntNmbr() int32 {
	if x != nil {
		return x.OrdBtstSttlmntNmbr
	}
	return 0
}

func (x *EquityOrderDetails) GetOrdBtstSgmntCd() string {
	if x != nil {
		return x.OrdBtstSgmntCd
	}
	return ""
}

func (x *EquityOrderDetails) GetOrdChannel() string {
	if x != nil {
		return x.OrdChannel
	}
	return ""
}

func (x *EquityOrderDetails) GetOrdBpId() string {
	if x != nil {
		return x.OrdBpId
	}
	return ""
}

func (x *EquityOrderDetails) GetOrdSltpOrdrRfrnc() string {
	if x != nil {
		return x.OrdSltpOrdrRfrnc
	}
	return ""
}

func (x *EquityOrderDetails) GetOrdCtclId() string {
	if x != nil {
		return x.OrdCtclId
	}
	return ""
}

func (x *EquityOrderDetails) GetOrdUsrId() string {
	if x != nil {
		return x.OrdUsrId
	}
	return ""
}

func (x *EquityOrderDetails) GetOrdCntId() int32 {
	if x != nil {
		return x.OrdCntId
	}
	return 0
}

func (x *EquityOrderDetails) GetOrdEmSettlmntNmbr() int32 {
	if x != nil {
		return x.OrdEmSettlmntNmbr
	}
	return 0
}

func (x *EquityOrderDetails) GetOrdMrgnSqroffMode() string {
	if x != nil {
		return x.OrdMrgnSqroffMode
	}
	return ""
}

func (x *EquityOrderDetails) GetOrdCnclQty() int32 {
	if x != nil {
		return x.OrdCnclQty
	}
	return 0
}

func (x *EquityOrderDetails) GetOrdOrdrTyp() string {
	if x != nil {
		return x.OrdOrdrTyp
	}
	return ""
}

func (x *EquityOrderDetails) GetOrdValidDt() string {
	if x != nil {
		return x.OrdValidDt
	}
	return ""
}

func (x *EquityOrderDetails) GetOrdCalFlg() string {
	if x != nil {
		return x.OrdCalFlg
	}
	return ""
}

func (x *EquityOrderDetails) GetOrdXchngAck() string {
	if x != nil {
		return x.OrdXchngAck
	}
	return ""
}

func (x *EquityOrderDetails) GetOrdEmRollovrFlg() string {
	if x != nil {
		return x.OrdEmRollovrFlg
	}
	return ""
}

func (x *EquityOrderDetails) GetOrdTrdVal() float64 {
	if x != nil {
		return x.OrdTrdVal
	}
	return 0
}

func (x *EquityOrderDetails) GetOrdTrdCntrctNmbr() string {
	if x != nil {
		return x.OrdTrdCntrctNmbr
	}
	return ""
}

func (x *EquityOrderDetails) GetOrdAvgExctdRt() float64 {
	if x != nil {
		return x.OrdAvgExctdRt
	}
	return 0
}

func (x *EquityOrderDetails) GetOrdPrcImpFlg() string {
	if x != nil {
		return x.OrdPrcImpFlg
	}
	return ""
}

func (x *EquityOrderDetails) GetOrdMbcFlg() string {
	if x != nil {
		return x.OrdMbcFlg
	}
	return ""
}

func (x *EquityOrderDetails) GetOrdTrlAmt() float64 {
	if x != nil {
		return x.OrdTrlAmt
	}
	return 0
}

func (x *EquityOrderDetails) GetOrdLmtOffst() float64 {
	if x != nil {
		return x.OrdLmtOffst
	}
	return 0
}

func (x *EquityOrderDetails) GetOrdSourceFlg() string {
	if x != nil {
		return x.OrdSourceFlg
	}
	return ""
}

func (x *EquityOrderDetails) GetOrdPanNo() string {
	if x != nil {
		return x.OrdPanNo
	}
	return ""
}

func (x *EquityOrderDetails) GetOrdAtmPayoutStts() string {
	if x != nil {
		return x.OrdAtmPayoutStts
	}
	return ""
}

func (x *EquityOrderDetails) GetOrdEspCd() string {
	if x != nil {
		return x.OrdEspCd
	}
	return ""
}

func (x *EquityOrderDetails) GetOrdRemarks() string {
	if x != nil {
		return x.OrdRemarks
	}
	return ""
}

func (x *EquityOrderDetails) GetOrdWthldAmtStts() string {
	if x != nil {
		return x.OrdWthldAmtStts
	}
	return ""
}

func (x *EquityOrderDetails) GetOrdPstnXchngCd() string {
	if x != nil {
		return x.OrdPstnXchngCd
	}
	return ""
}

func (x *EquityOrderDetails) GetOrdInteropOrdFlg() string {
	if x != nil {
		return x.OrdInteropOrdFlg
	}
	return ""
}

func (x *EquityOrderDetails) GetOrdSettlementPeriod() int32 {
	if x != nil {
		return x.OrdSettlementPeriod
	}
	return 0
}

func (x *EquityOrderDetails) GetOrdAlgoId() string {
	if x != nil {
		return x.OrdAlgoId
	}
	return ""
}

func (x *EquityOrderDetails) GetOrdBundleName() string {
	if x != nil {
		return x.OrdBundleName
	}
	return ""
}

func (x *EquityOrderDetails) GetOrdPrtFlg() string {
	if x != nil {
		return x.OrdPrtFlg
	}
	return ""
}

func (x *EquityOrderDetails) GetOrdSrcTag() string {
	if x != nil {
		return x.OrdSrcTag
	}
	return ""
}

func (x *EquityOrderDetails) GetOrdRlsAmt() float64 {
	if x != nil {
		return x.OrdRlsAmt
	}
	return 0
}

func (x *EquityOrderDetails) GetOrdRlsDate() string {
	if x != nil {
		return x.OrdRlsDate
	}
	return ""
}

func (x *EquityOrderDetails) GetOrdMtfUnplgSqroff() string {
	if x != nil {
		return x.OrdMtfUnplgSqroff
	}
	return ""
}

func (x *EquityOrderDetails) GetOrdNOrdrQty() int32 {
	if x != nil {
		return x.OrdNOrdrQty
	}
	return 0
}

func (x *EquityOrderDetails) GetOrdAckDate() string {
	if x != nil {
		return x.OrdAckDate
	}
	return ""
}

func (x *EquityOrderDetails) GetOrdLastActivityRef() string {
	if x != nil {
		return x.OrdLastActivityRef
	}
	return ""
}

func (x *EquityOrderDetails) GetOrdClmClntCd() *wrapperspb.StringValue {
	if x != nil {
		return x.OrdClmClntCd
	}
	return nil
}

type EquityOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrdDtls []*EquityOrderDetails `protobuf:"bytes,1,rep,name=ord_dtls,json=ordDtls,proto3" json:"ord_dtls,omitempty"`
}

func (x *EquityOrderResponse) Reset() {
	*x = EquityOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_equordr_equOrderDetails_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquityOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquityOrderResponse) ProtoMessage() {}

func (x *EquityOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_equordr_equOrderDetails_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquityOrderResponse.ProtoReflect.Descriptor instead.
func (*EquityOrderResponse) Descriptor() ([]byte, []int) {
	return file_equordr_equOrderDetails_proto_rawDescGZIP(), []int{2}
}

func (x *EquityOrderResponse) GetOrdDtls() []*EquityOrderDetails {
	if x != nil {
		return x.OrdDtls
	}
	return nil
}

var File_equordr_equOrderDetails_proto protoreflect.FileDescriptor

var file_equordr_equOrderDetails_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x65, 0x71, 0x75, 0x6f, 0x72, 0x64, 0x72, 0x2f, 0x65, 0x71, 0x75, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x65, 0x71, 0x75, 0x6f, 0x72, 0x64, 0x72, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x41, 0x0a, 0x12, 0x45, 0x71, 0x75, 0x69,
	0x74, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b,
	0x0a, 0x12, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x6c, 0x6d, 0x5f, 0x6d, 0x74, 0x63, 0x68, 0x5f, 0x61,
	0x63, 0x63, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x72, 0x64, 0x43,
	0x6c, 0x6d, 0x4d, 0x74, 0x63, 0x68, 0x41, 0x63, 0x63, 0x6e, 0x74, 0x22, 0xd6, 0x19, 0x0a, 0x12,
	0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x2b, 0x0a, 0x12, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x6c, 0x6d, 0x5f, 0x6d, 0x74,
	0x63, 0x68, 0x5f, 0x61, 0x63, 0x63, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x6f, 0x72, 0x64, 0x43, 0x6c, 0x6d, 0x4d, 0x74, 0x63, 0x68, 0x41, 0x63, 0x63, 0x6e, 0x74, 0x12,
	0x24, 0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x72, 0x5f, 0x72, 0x66, 0x72, 0x6e,
	0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x64, 0x4f, 0x72, 0x64, 0x72,
	0x52, 0x66, 0x72, 0x6e, 0x63, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x5f, 0x78, 0x63, 0x68,
	0x6e, 0x67, 0x5f, 0x63, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x72, 0x64,
	0x58, 0x63, 0x68, 0x6e, 0x67, 0x43, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x5f, 0x73,
	0x74, 0x63, 0x6b, 0x5f, 0x63, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72,
	0x64, 0x53, 0x74, 0x63, 0x6b, 0x43, 0x64, 0x12, 0x2b, 0x0a, 0x12, 0x6f, 0x72, 0x64, 0x5f, 0x78,
	0x63, 0x68, 0x6e, 0x67, 0x5f, 0x73, 0x67, 0x6d, 0x6e, 0x74, 0x5f, 0x63, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x72, 0x64, 0x58, 0x63, 0x68, 0x6e, 0x67, 0x53, 0x67, 0x6d,
	0x6e, 0x74, 0x43, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x6f, 0x72, 0x64, 0x5f, 0x78, 0x63, 0x68, 0x6e,
	0x67, 0x5f, 0x73, 0x67, 0x6d, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x74, 0x6c, 0x6d, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6f, 0x72, 0x64, 0x58, 0x63, 0x68, 0x6e, 0x67, 0x53,
	0x67, 0x6d, 0x6e, 0x74, 0x53, 0x74, 0x74, 0x6c, 0x6d, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x6f,
	0x72, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x72, 0x5f, 0x64, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6f, 0x72, 0x64, 0x4f, 0x72, 0x64, 0x72, 0x44, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x6f,
	0x72, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x72, 0x5f, 0x66, 0x6c, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x4f, 0x72, 0x64, 0x72, 0x46, 0x6c, 0x77, 0x12, 0x22, 0x0a,
	0x0d, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x64, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x50, 0x72, 0x64, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x72, 0x5f, 0x71, 0x74,
	0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x4f, 0x72, 0x64, 0x72,
	0x51, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x10, 0x6f, 0x72, 0x64, 0x5f, 0x6c, 0x6d, 0x74, 0x5f, 0x6d,
	0x72, 0x6b, 0x74, 0x5f, 0x66, 0x6c, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f,
	0x72, 0x64, 0x4c, 0x6d, 0x74, 0x4d, 0x72, 0x6b, 0x74, 0x46, 0x6c, 0x67, 0x12, 0x1c, 0x0a, 0x0a,
	0x6f, 0x72, 0x64, 0x5f, 0x6c, 0x6d, 0x74, 0x5f, 0x72, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x6f, 0x72, 0x64, 0x4c, 0x6d, 0x74, 0x52, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x72,
	0x64, 0x5f, 0x64, 0x73, 0x63, 0x6c, 0x73, 0x64, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x6f, 0x72, 0x64, 0x44, 0x73, 0x63, 0x6c, 0x73, 0x64, 0x51, 0x74, 0x79,
	0x12, 0x25, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x74, 0x70, 0x5f, 0x6c, 0x73, 0x73, 0x5f,
	0x74, 0x67, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6f, 0x72, 0x64, 0x53, 0x74,
	0x70, 0x4c, 0x73, 0x73, 0x54, 0x67, 0x72, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x5f, 0x6f,
	0x72, 0x64, 0x72, 0x5f, 0x73, 0x74, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6f, 0x72, 0x64, 0x4f, 0x72, 0x64, 0x72, 0x53, 0x74, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x0a, 0x6f,
	0x72, 0x64, 0x5f, 0x74, 0x72, 0x64, 0x5f, 0x64, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6f, 0x72, 0x64, 0x54, 0x72, 0x64, 0x44, 0x74, 0x12, 0x27, 0x0a, 0x10, 0x6f, 0x72, 0x64,
	0x5f, 0x73, 0x75, 0x62, 0x5f, 0x62, 0x72, 0x6b, 0x72, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x53, 0x75, 0x62, 0x42, 0x72, 0x6b, 0x72, 0x54,
	0x61, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x5f, 0x6d, 0x64, 0x66, 0x63, 0x74, 0x6e,
	0x5f, 0x63, 0x6e, 0x74, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6f, 0x72, 0x64,
	0x4d, 0x64, 0x66, 0x63, 0x74, 0x6e, 0x43, 0x6e, 0x74, 0x72, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x72,
	0x64, 0x5f, 0x61, 0x63, 0x6b, 0x5f, 0x6e, 0x6d, 0x62, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6f, 0x72, 0x64, 0x41, 0x63, 0x6b, 0x4e, 0x6d, 0x62, 0x72, 0x12, 0x29, 0x0a, 0x11,
	0x6f, 0x72, 0x64, 0x5f, 0x78, 0x63, 0x68, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x6b, 0x5f, 0x6f, 0x6c,
	0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x58, 0x63, 0x68, 0x6e,
	0x67, 0x41, 0x63, 0x6b, 0x4f, 0x6c, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x5f, 0x65,
	0x78, 0x63, 0x74, 0x64, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x6f, 0x72, 0x64, 0x45, 0x78, 0x63, 0x74, 0x64, 0x51, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0d, 0x6f,
	0x72, 0x64, 0x5f, 0x61, 0x6d, 0x74, 0x5f, 0x62, 0x6c, 0x63, 0x6b, 0x64, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x41, 0x6d, 0x74, 0x42, 0x6c, 0x63, 0x6b, 0x64, 0x12,
	0x22, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x5f, 0x62, 0x72, 0x6b, 0x72, 0x67, 0x5f, 0x76, 0x61, 0x6c,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x42, 0x72, 0x6b, 0x72, 0x67,
	0x56, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x5f, 0x64, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x44, 0x70, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x5f, 0x64, 0x70, 0x5f, 0x63, 0x6c, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x44, 0x70, 0x43, 0x6c,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x68, 0x79, 0x5f,
	0x71, 0x74, 0x79, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x50, 0x68,
	0x79, 0x51, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x73, 0x69, 0x6e,
	0x5f, 0x6e, 0x6d, 0x62, 0x72, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72, 0x64,
	0x49, 0x73, 0x69, 0x6e, 0x4e, 0x6d, 0x62, 0x72, 0x12, 0x1c, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x5f,
	0x6e, 0x64, 0x5f, 0x66, 0x6c, 0x67, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72,
	0x64, 0x4e, 0x64, 0x46, 0x6c, 0x67, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x5f, 0x6d, 0x73,
	0x63, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x72,
	0x64, 0x4d, 0x73, 0x63, 0x43, 0x68, 0x61, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x5f,
	0x6d, 0x73, 0x63, 0x5f, 0x76, 0x61, 0x72, 0x63, 0x68, 0x61, 0x72, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x4d, 0x73, 0x63, 0x56, 0x61, 0x72, 0x63, 0x68, 0x61, 0x72,
	0x12, 0x1e, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x5f, 0x6d, 0x73, 0x63, 0x5f, 0x69, 0x6e, 0x74, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x4d, 0x73, 0x63, 0x49, 0x6e, 0x74,
	0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x6c, 0x63, 0x64, 0x5f, 0x73, 0x74, 0x74,
	0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x50, 0x6c, 0x63, 0x64,
	0x53, 0x74, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x5f, 0x71, 0x74, 0x79, 0x5f,
	0x62, 0x6c, 0x63, 0x6b, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6f, 0x72, 0x64,
	0x51, 0x74, 0x79, 0x42, 0x6c, 0x63, 0x6b, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x5f,
	0x6d, 0x72, 0x67, 0x6e, 0x5f, 0x70, 0x72, 0x63, 0x6e, 0x74, 0x67, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x4d, 0x72, 0x67, 0x6e, 0x50, 0x72, 0x63, 0x6e, 0x74, 0x67,
	0x12, 0x1e, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x70, 0x6f, 0x5f, 0x66, 0x6c, 0x67, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x49, 0x70, 0x6f, 0x46, 0x6c, 0x67,
	0x12, 0x29, 0x0a, 0x11, 0x6f, 0x72, 0x64, 0x5f, 0x6c, 0x73, 0x73, 0x5f, 0x61, 0x6d, 0x74, 0x5f,
	0x62, 0x6c, 0x63, 0x6b, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x6f, 0x72, 0x64,
	0x4c, 0x73, 0x73, 0x41, 0x6d, 0x74, 0x42, 0x6c, 0x63, 0x6b, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x6f,
	0x72, 0x64, 0x5f, 0x6c, 0x73, 0x73, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x25, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x6f, 0x72, 0x64, 0x4c, 0x73, 0x73, 0x51, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0b, 0x6f,
	0x72, 0x64, 0x5f, 0x6d, 0x74, 0x6d, 0x5f, 0x66, 0x6c, 0x67, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6f, 0x72, 0x64, 0x4d, 0x74, 0x6d, 0x46, 0x6c, 0x67, 0x12, 0x1c, 0x0a, 0x0a, 0x6f,
	0x72, 0x64, 0x5f, 0x73, 0x71, 0x5f, 0x66, 0x6c, 0x67, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6f, 0x72, 0x64, 0x53, 0x71, 0x46, 0x6c, 0x67, 0x12, 0x1e, 0x0a, 0x0b, 0x6f, 0x72, 0x64,
	0x5f, 0x73, 0x63, 0x68, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6f, 0x72, 0x64, 0x53, 0x63, 0x68, 0x6d, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x6f, 0x72, 0x64,
	0x5f, 0x70, 0x69, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6f, 0x72, 0x64, 0x50, 0x69, 0x70, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x72, 0x64,
	0x5f, 0x70, 0x72, 0x74, 0x63, 0x74, 0x6e, 0x5f, 0x72, 0x74, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0b, 0x6f, 0x72, 0x64, 0x50, 0x72, 0x74, 0x63, 0x74, 0x6e, 0x52, 0x74, 0x12, 0x23, 0x0a,
	0x0e, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x6c, 0x5f, 0x74, 0x72, 0x67, 0x5f, 0x66, 0x6c, 0x67, 0x18,
	0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x53, 0x6c, 0x54, 0x72, 0x67, 0x46,
	0x6c, 0x67, 0x12, 0x27, 0x0a, 0x10, 0x6f, 0x72, 0x64, 0x5f, 0x78, 0x63, 0x68, 0x6e, 0x67, 0x5f,
	0x75, 0x73, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6f, 0x72,
	0x64, 0x58, 0x63, 0x68, 0x6e, 0x67, 0x55, 0x73, 0x72, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x6f,
	0x72, 0x64, 0x5f, 0x62, 0x74, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x74, 0x6c, 0x6d, 0x6e, 0x74, 0x5f,
	0x6e, 0x6d, 0x62, 0x72, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6f, 0x72, 0x64, 0x42,
	0x74, 0x73, 0x74, 0x53, 0x74, 0x74, 0x6c, 0x6d, 0x6e, 0x74, 0x4e, 0x6d, 0x62, 0x72, 0x12, 0x29,
	0x0a, 0x11, 0x6f, 0x72, 0x64, 0x5f, 0x62, 0x74, 0x73, 0x74, 0x5f, 0x73, 0x67, 0x6d, 0x6e, 0x74,
	0x5f, 0x63, 0x64, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x42, 0x74,
	0x73, 0x74, 0x53, 0x67, 0x6d, 0x6e, 0x74, 0x43, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x72, 0x64,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6f, 0x72, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x09, 0x6f, 0x72,
	0x64, 0x5f, 0x62, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f,
	0x72, 0x64, 0x42, 0x70, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x6c,
	0x74, 0x70, 0x5f, 0x6f, 0x72, 0x64, 0x72, 0x5f, 0x72, 0x66, 0x72, 0x6e, 0x63, 0x18, 0x31, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x72, 0x64, 0x53, 0x6c, 0x74, 0x70, 0x4f, 0x72, 0x64, 0x72,
	0x52, 0x66, 0x72, 0x6e, 0x63, 0x12, 0x1e, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x74, 0x63,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x43,
	0x74, 0x63, 0x6c, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x5f, 0x75, 0x73, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x55, 0x73,
	0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x34, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x43, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x2f, 0x0a, 0x14, 0x6f, 0x72, 0x64, 0x5f, 0x65, 0x6d, 0x5f, 0x73, 0x65, 0x74, 0x74,
	0x6c, 0x6d, 0x6e, 0x74, 0x5f, 0x6e, 0x6d, 0x62, 0x72, 0x18, 0x35, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x11, 0x6f, 0x72, 0x64, 0x45, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x6d, 0x6e, 0x74, 0x4e, 0x6d,
	0x62, 0x72, 0x12, 0x2f, 0x0a, 0x14, 0x6f, 0x72, 0x64, 0x5f, 0x6d, 0x72, 0x67, 0x6e, 0x5f, 0x73,
	0x71, 0x72, 0x6f, 0x66, 0x66, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x6f, 0x72, 0x64, 0x4d, 0x72, 0x67, 0x6e, 0x53, 0x71, 0x72, 0x6f, 0x66, 0x66, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x6e, 0x63, 0x6c, 0x5f,
	0x71, 0x74, 0x79, 0x18, 0x37, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x43, 0x6e,
	0x63, 0x6c, 0x51, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x5f, 0x6f, 0x72, 0x64,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x72, 0x64,
	0x4f, 0x72, 0x64, 0x72, 0x54, 0x79, 0x70, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x5f, 0x64, 0x74, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f,
	0x72, 0x64, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x44, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x6f, 0x72, 0x64,
	0x5f, 0x63, 0x61, 0x6c, 0x5f, 0x66, 0x6c, 0x67, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6f, 0x72, 0x64, 0x43, 0x61, 0x6c, 0x46, 0x6c, 0x67, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x72, 0x64,
	0x5f, 0x78, 0x63, 0x68, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6f, 0x72, 0x64, 0x58, 0x63, 0x68, 0x6e, 0x67, 0x41, 0x63, 0x6b, 0x12, 0x2b, 0x0a,
	0x12, 0x6f, 0x72, 0x64, 0x5f, 0x65, 0x6d, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x76, 0x72, 0x5f,
	0x66, 0x6c, 0x67, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x72, 0x64, 0x45, 0x6d,
	0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x76, 0x72, 0x46, 0x6c, 0x67, 0x12, 0x1e, 0x0a, 0x0b, 0x6f, 0x72,
	0x64, 0x5f, 0x74, 0x72, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x6f, 0x72, 0x64, 0x54, 0x72, 0x64, 0x56, 0x61, 0x6c, 0x12, 0x2d, 0x0a, 0x13, 0x6f, 0x72,
	0x64, 0x5f, 0x74, 0x72, 0x64, 0x5f, 0x63, 0x6e, 0x74, 0x72, 0x63, 0x74, 0x5f, 0x6e, 0x6d, 0x62,
	0x72, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x72, 0x64, 0x54, 0x72, 0x64, 0x43,
	0x6e, 0x74, 0x72, 0x63, 0x74, 0x4e, 0x6d, 0x62, 0x72, 0x12, 0x27, 0x0a, 0x10, 0x6f, 0x72, 0x64,
	0x5f, 0x61, 0x76, 0x67, 0x5f, 0x65, 0x78, 0x63, 0x74, 0x64, 0x5f, 0x72, 0x74, 0x18, 0x3f, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x41, 0x76, 0x67, 0x45, 0x78, 0x63, 0x74, 0x64,
	0x52, 0x74, 0x12, 0x25, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x63, 0x5f, 0x69, 0x6d,
	0x70, 0x5f, 0x66, 0x6c, 0x67, 0x18, 0x40, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x64,
	0x50, 0x72, 0x63, 0x49, 0x6d, 0x70, 0x46, 0x6c, 0x67, 0x12, 0x1e, 0x0a, 0x0b, 0x6f, 0x72, 0x64,
	0x5f, 0x6d, 0x62, 0x63, 0x5f, 0x66, 0x6c, 0x67, 0x18, 0x41, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6f, 0x72, 0x64, 0x4d, 0x62, 0x63, 0x46, 0x6c, 0x67, 0x12, 0x1e, 0x0a, 0x0b, 0x6f, 0x72, 0x64,
	0x5f, 0x74, 0x72, 0x6c, 0x5f, 0x61, 0x6d, 0x74, 0x18, 0x42, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x6f, 0x72, 0x64, 0x54, 0x72, 0x6c, 0x41, 0x6d, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x72, 0x64,
	0x5f, 0x6c, 0x6d, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x74, 0x18, 0x43, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0b, 0x6f, 0x72, 0x64, 0x4c, 0x6d, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x74, 0x12, 0x24, 0x0a,
	0x0e, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x66, 0x6c, 0x67, 0x18,
	0x44, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x46, 0x6c, 0x67, 0x12, 0x1c, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x6e, 0x5f, 0x6e,
	0x6f, 0x18, 0x45, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x50, 0x61, 0x6e, 0x4e,
	0x6f, 0x12, 0x2d, 0x0a, 0x13, 0x6f, 0x72, 0x64, 0x5f, 0x61, 0x74, 0x6d, 0x5f, 0x70, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x5f, 0x73, 0x74, 0x74, 0x73, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x6f, 0x72, 0x64, 0x41, 0x74, 0x6d, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x53, 0x74, 0x74, 0x73,
	0x12, 0x1c, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x5f, 0x65, 0x73, 0x70, 0x5f, 0x63, 0x64, 0x18, 0x47,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x45, 0x73, 0x70, 0x43, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x48, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12,
	0x2b, 0x0a, 0x12, 0x6f, 0x72, 0x64, 0x5f, 0x77, 0x74, 0x68, 0x6c, 0x64, 0x5f, 0x61, 0x6d, 0x74,
	0x5f, 0x73, 0x74, 0x74, 0x73, 0x18, 0x49, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x72, 0x64,
	0x57, 0x74, 0x68, 0x6c, 0x64, 0x41, 0x6d, 0x74, 0x53, 0x74, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x11,
	0x6f, 0x72, 0x64, 0x5f, 0x70, 0x73, 0x74, 0x6e, 0x5f, 0x78, 0x63, 0x68, 0x6e, 0x67, 0x5f, 0x63,
	0x64, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x50, 0x73, 0x74, 0x6e,
	0x58, 0x63, 0x68, 0x6e, 0x67, 0x43, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x6f, 0x72, 0x64, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6f, 0x70, 0x5f, 0x6f, 0x72, 0x64, 0x5f, 0x66, 0x6c, 0x67, 0x18, 0x4b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x72, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6f, 0x70,
	0x4f, 0x72, 0x64, 0x46, 0x6c, 0x67, 0x12, 0x32, 0x0a, 0x15, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18,
	0x4c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x6f, 0x72,
	0x64, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6f, 0x72, 0x64, 0x41, 0x6c, 0x67, 0x6f, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x72,
	0x64, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x4e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x74, 0x5f, 0x66, 0x6c,
	0x67, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x50, 0x72, 0x74, 0x46,
	0x6c, 0x67, 0x12, 0x1e, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x74, 0x61,
	0x67, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x53, 0x72, 0x63, 0x54,
	0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x5f, 0x72, 0x6c, 0x73, 0x5f, 0x61, 0x6d,
	0x74, 0x18, 0x51, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x52, 0x6c, 0x73, 0x41,
	0x6d, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x5f, 0x72, 0x6c, 0x73, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x52, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x52, 0x6c, 0x73,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x6f, 0x72, 0x64, 0x5f, 0x6d, 0x74, 0x66, 0x5f,
	0x75, 0x6e, 0x70, 0x6c, 0x67, 0x5f, 0x73, 0x71, 0x72, 0x6f, 0x66, 0x66, 0x18, 0x53, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x6f, 0x72, 0x64, 0x4d, 0x74, 0x66, 0x55, 0x6e, 0x70, 0x6c, 0x67, 0x53,
	0x71, 0x72, 0x6f, 0x66, 0x66, 0x12, 0x23, 0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x5f, 0x6e, 0x5f, 0x6f,
	0x72, 0x64, 0x72, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x54, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6f,
	0x72, 0x64, 0x4e, 0x4f, 0x72, 0x64, 0x72, 0x51, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x72,
	0x64, 0x5f, 0x61, 0x63, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x55, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6f, 0x72, 0x64, 0x41, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x15,
	0x6f, 0x72, 0x64, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x56, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x72, 0x64,
	0x4c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x66, 0x12,
	0x43, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x6c, 0x6d, 0x5f, 0x63, 0x6c, 0x6e, 0x74, 0x5f,
	0x63, 0x64, 0x18, 0x57, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x6f, 0x72, 0x64, 0x43, 0x6c, 0x6d, 0x43, 0x6c,
	0x6e, 0x74, 0x43, 0x64, 0x22, 0x4d, 0x0a, 0x13, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x6f,
	0x72, 0x64, 0x5f, 0x64, 0x74, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x65, 0x71, 0x75, 0x6f, 0x72, 0x64, 0x72, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x44,
	0x74, 0x6c, 0x73, 0x32, 0x61, 0x0a, 0x12, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4b, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x65, 0x71,
	0x75, 0x6f, 0x72, 0x64, 0x72, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x65, 0x71, 0x75, 0x6f, 0x72,
	0x64, 0x72, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x03, 0x5a, 0x01, 0x2e, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_equordr_equOrderDetails_proto_rawDescOnce sync.Once
	file_equordr_equOrderDetails_proto_rawDescData = file_equordr_equOrderDetails_proto_rawDesc
)

func file_equordr_equOrderDetails_proto_rawDescGZIP() []byte {
	file_equordr_equOrderDetails_proto_rawDescOnce.Do(func() {
		file_equordr_equOrderDetails_proto_rawDescData = protoimpl.X.CompressGZIP(file_equordr_equOrderDetails_proto_rawDescData)
	})
	return file_equordr_equOrderDetails_proto_rawDescData
}

var file_equordr_equOrderDetails_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_equordr_equOrderDetails_proto_goTypes = []any{
	(*EquityOrderRequest)(nil),     // 0: equordr.EquityOrderRequest
	(*EquityOrderDetails)(nil),     // 1: equordr.EquityOrderDetails
	(*EquityOrderResponse)(nil),    // 2: equordr.EquityOrderResponse
	(*wrapperspb.StringValue)(nil), // 3: google.protobuf.StringValue
}
var file_equordr_equOrderDetails_proto_depIdxs = []int32{
	3, // 0: equordr.EquityOrderDetails.ord_clm_clnt_cd:type_name -> google.protobuf.StringValue
	1, // 1: equordr.EquityOrderResponse.ord_dtls:type_name -> equordr.EquityOrderDetails
	0, // 2: equordr.EquityOrderService.GetEquityOrder:input_type -> equordr.EquityOrderRequest
	2, // 3: equordr.EquityOrderService.GetEquityOrder:output_type -> equordr.EquityOrderResponse
	3, // [3:4] is the sub-list for method output_type
	2, // [2:3] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_equordr_equOrderDetails_proto_init() }
func file_equordr_equOrderDetails_proto_init() {
	if File_equordr_equOrderDetails_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_equordr_equOrderDetails_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*EquityOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_equordr_equOrderDetails_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*EquityOrderDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_equordr_equOrderDetails_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*EquityOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_equordr_equOrderDetails_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_equordr_equOrderDetails_proto_goTypes,
		DependencyIndexes: file_equordr_equOrderDetails_proto_depIdxs,
		MessageInfos:      file_equordr_equOrderDetails_proto_msgTypes,
	}.Build()
	File_equordr_equOrderDetails_proto = out.File
	file_equordr_equOrderDetails_proto_rawDesc = nil
	file_equordr_equOrderDetails_proto_goTypes = nil
	file_equordr_equOrderDetails_proto_depIdxs = nil
}
