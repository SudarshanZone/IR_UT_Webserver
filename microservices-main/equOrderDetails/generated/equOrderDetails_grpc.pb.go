// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: equordr/equOrderDetails.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EquityOrderServiceClient is the client API for EquityOrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EquityOrderServiceClient interface {
	GetEquityOrder(ctx context.Context, in *EquityOrderRequest, opts ...grpc.CallOption) (*EquityOrderResponse, error)
}

type equityOrderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEquityOrderServiceClient(cc grpc.ClientConnInterface) EquityOrderServiceClient {
	return &equityOrderServiceClient{cc}
}

func (c *equityOrderServiceClient) GetEquityOrder(ctx context.Context, in *EquityOrderRequest, opts ...grpc.CallOption) (*EquityOrderResponse, error) {
	out := new(EquityOrderResponse)
	err := c.cc.Invoke(ctx, "/equordr.EquityOrderService/GetEquityOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EquityOrderServiceServer is the server API for EquityOrderService service.
// All implementations must embed UnimplementedEquityOrderServiceServer
// for forward compatibility
type EquityOrderServiceServer interface {
	GetEquityOrder(context.Context, *EquityOrderRequest) (*EquityOrderResponse, error)
	mustEmbedUnimplementedEquityOrderServiceServer()
}

// UnimplementedEquityOrderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEquityOrderServiceServer struct {
}

func (UnimplementedEquityOrderServiceServer) GetEquityOrder(context.Context, *EquityOrderRequest) (*EquityOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEquityOrder not implemented")
}
func (UnimplementedEquityOrderServiceServer) mustEmbedUnimplementedEquityOrderServiceServer() {}

// UnsafeEquityOrderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EquityOrderServiceServer will
// result in compilation errors.
type UnsafeEquityOrderServiceServer interface {
	mustEmbedUnimplementedEquityOrderServiceServer()
}

func RegisterEquityOrderServiceServer(s grpc.ServiceRegistrar, srv EquityOrderServiceServer) {
	s.RegisterService(&EquityOrderService_ServiceDesc, srv)
}

func _EquityOrderService_GetEquityOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EquityOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EquityOrderServiceServer).GetEquityOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/equordr.EquityOrderService/GetEquityOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EquityOrderServiceServer).GetEquityOrder(ctx, req.(*EquityOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EquityOrderService_ServiceDesc is the grpc.ServiceDesc for EquityOrderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EquityOrderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "equordr.EquityOrderService",
	HandlerType: (*EquityOrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEquityOrder",
			Handler:    _EquityOrderService_GetEquityOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "equordr/equOrderDetails.proto",
}
